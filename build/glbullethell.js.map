{"version":3,"sources":["Bullet.js","BulletSprites.js","DownloadScene.js","Effect.js","EffectSprites.js","GLLayer.js","GlowEffect.js","LoadScene.js","Obj.js","ObjAsset.js","ObjDrawer.js","Terrain.js","Utils.js"],"names":[],"mappingsvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"glbullethell.js","sourcesContent":["phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Bullet\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n    runner: null,\r\n\r\n    x: 0,\r\n    y: 0,\r\n    age: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(runner, option) {\r\n      var instanceData = this.instanceData;\r\n      var index = this.index;\r\n\r\n      this.runner = runner;\r\n      this.x = runner.x;\r\n      this.y = runner.y;\r\n      this.age = 0;\r\n      instanceData[index + 0] = this.x;\r\n      instanceData[index + 1] = this.y;\r\n      instanceData[index + 2] = runner.direction; // rotation\r\n      instanceData[index + 3] = 1.5; // scale\r\n      instanceData[index + 4] = option.type % 8; // frame.x\r\n      instanceData[index + 5] = ~~(option.type / 8); // frame.y\r\n      instanceData[index + 6] = 1; // visible\r\n      instanceData[index + 7] = 1; // brightness\r\n      instanceData[index + 8] = 0.2 + ~~(option.type / 8) % 2; // auraColor.r\r\n      instanceData[index + 9] = 0.2 + 0; // auraColor.g\r\n      instanceData[index + 10] = 0.2 + ~~(option.type / 8) % 2 + 1; // auraColor.b\r\n\r\n      var self = this;\r\n      runner.onVanish = function() {\r\n        self.remove();\r\n      };\r\n\r\n      return this;\r\n    },\r\n    \r\n    onremoved: function() {\r\n      this.instanceData[this.index + 6] = 0;\r\n    },\r\n\r\n    update: function(app) {\r\n      var instanceData = this.instanceData;\r\n      var index = this.index;\r\n      var runner = this.runner;\r\n\r\n      runner.update();\r\n      this.x = runner.x;\r\n      this.y = runner.y;\r\n\r\n      if (this.x < -100 || SCREEN_WIDTH + 100 < this.x || this.y < -100 || SCREEN_HEIGHT + 100 < this.y) {\r\n        this.remove();\r\n        return;\r\n      }\r\n\r\n      instanceData[index + 0] = this.x;\r\n      instanceData[index + 1] = this.y;\r\n      instanceData[index + 7] = 1.5 + Math.sin(this.age * 0.2) * 0.6;\r\n\r\n      this.age += 1;\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  phina.define(\"glb.BulletSprites\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    instanceData: null,\r\n    pool: null,\r\n    _count: 1000,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.superInit(gl, ext);\r\n      this\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"bulletSprites\"))\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -16, +16,\r\n            //\r\n            +16, +16,\r\n            //\r\n            -16, -16,\r\n            //\r\n            +16, -16,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 32 / 256,\r\n            //\r\n            32 / 256, 32 / 256,\r\n            //\r\n            0, 0,\r\n            //\r\n            32 / 256, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceVisible\",\r\n          \"instanceBrightness\",\r\n          \"instanceAuraColor\"\r\n        )\r\n        .setUniforms(\r\n          \"vMatrix\",\r\n          \"pMatrix\",\r\n          \"texture\",\r\n          \"globalScale\"\r\n        );\r\n\r\n      var instanceUnit = this.instanceStride / 4;\r\n\r\n      this.uniforms.vMatrix.setValue(\r\n        mat4.lookAt(mat4.create(), [w / 2, h * 0.75, w * 1.5], [w / 2, h / 2, 0], [0, 1, 0])\r\n      );\r\n      this.uniforms.pMatrix.setValue(\r\n        mat4.ortho(mat4.create(), -w / 2, w / 2, h / 2, -h / 2, 0.1, 3000)\r\n      );\r\n      this.uniforms.texture.setValue(0).setTexture(phigl.Texture(gl, \"bullets.png\"));\r\n      this.uniforms.globalScale.setValue(1.0);\r\n\r\n      var instanceData = this.instanceData = [];\r\n      for (var i = 0; i < this._count; i++) {\r\n        instanceData.push(\r\n          // position\r\n          0, 0,\r\n          // rotation\r\n          0,\r\n          // scale\r\n          1,\r\n          // frame\r\n          0, 0,\r\n          // visible\r\n          0,\r\n          // brightness\r\n          0,\r\n          // auraColor\r\n          0, 0, 0\r\n        );\r\n      }\r\n      this.setInstanceAttributeData(instanceData);\r\n\r\n      var self = this;\r\n      this.pool = Array.range(0, this._count).map(function(id) {\r\n        return glb.Bullet(id, instanceData, instanceUnit)\r\n          .on(\"removed\", function() {\r\n            self.pool.push(this);\r\n          });\r\n      });\r\n    },\r\n\r\n    get: function() {\r\n      var b = this.pool.shift();\r\n      return b;\r\n    },\r\n\r\n    update: function(app) {\r\n      this.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    render: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.disable(gl.CULL_FACE);\r\n\r\n      this.uniforms.globalScale.value = 1.0;\r\n      this.draw(this._count);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.DownloadScene\", {\r\n    superClass: \"phina.game.LoadingScene\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Effect\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n\r\n    x: 0,\r\n    y: 0,\r\n    rotation: 0,\r\n    scale: 0,\r\n\r\n    age: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(options) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n      this.rotation = options.rotation;\r\n      this.scale = options.scale;\r\n      this.alpha = options.alpha;\r\n\r\n      instanceData[index + 0] = 1; // visible\r\n      instanceData[index + 1] = this.x; // position.x\r\n      instanceData[index + 2] = this.y; // position.y\r\n      instanceData[index + 3] = this.rotation; // rotation\r\n      instanceData[index + 4] = this.scale; // scale\r\n      instanceData[index + 5] = 0; // frame.x\r\n      instanceData[index + 6] = 0; // frame.y\r\n      instanceData[index + 7] = this.alpha; // alpha\r\n\r\n      this.age = 0;\r\n\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      if (this.x < -100 || 640 + 100 < this.x || this.y < -100 || 960 + 100 < this.y) {\r\n        this.remove();\r\n        return;\r\n      }\r\n\r\n      instanceData[index + 1] = this.x;\r\n      instanceData[index + 2] = this.y;\r\n      instanceData[index + 3] = this.rotation;\r\n      instanceData[index + 4] = this.scale;\r\n      instanceData[index + 7] = this.alpha;\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.instanceData[this.index + 0] = 0;\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.EffectSprites\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    instanceData: null,\r\n    pool: null,\r\n    _count: 200,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.superInit(gl, ext);\r\n      this\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"effectSprites\"))\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -16, +16,\r\n            //\r\n            +16, +16,\r\n            //\r\n            -16, -16,\r\n            //\r\n            +16, -16,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 32 / 256,\r\n            //\r\n            32 / 256, 32 / 256,\r\n            //\r\n            0, 0,\r\n            //\r\n            32 / 256, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceAlpha\"\r\n        )\r\n        .setUniforms(\r\n          \"vMatrix\",\r\n          \"pMatrix\",\r\n          \"texture\",\r\n          \"globalScale\"\r\n        );\r\n\r\n      var instanceStride = this.instanceStride / 4;\r\n\r\n      this.uniforms.vMatrix.setValue(\r\n        mat4.lookAt(mat4.create(), [w / 2, h * 0.75, w * 1.5], [w / 2, h / 2, 0], [0, 1, 0])\r\n      );\r\n      this.uniforms.pMatrix.setValue(\r\n        mat4.ortho(mat4.create(), -w / 2, w / 2, h / 2, -h / 2, 0.1, 3000)\r\n      );\r\n      this.uniforms.texture.setValue(0).setTexture(phigl.Texture(gl, this._createTexture()));\r\n      this.uniforms.globalScale.setValue(1.0);\r\n\r\n      var instanceData = this.instanceData = [];\r\n      for (var i = 0; i < this._count; i++) {\r\n        instanceData.push(\r\n          // visible\r\n          0,\r\n          // position\r\n          0, 0,\r\n          // rotation\r\n          0,\r\n          // scale\r\n          1,\r\n          // frame\r\n          0, 0,\r\n          // alpha\r\n          0\r\n        );\r\n      }\r\n      this.setInstanceAttributeData(instanceData);\r\n\r\n      var self = this;\r\n      this.pool = Array.range(0, this._count).map(function(id) {\r\n        return glb.Effect(id, instanceData, instanceStride)\r\n          .on(\"removed\", function() {\r\n            self.pool.push(this);\r\n          });\r\n      });\r\n    },\r\n\r\n    _createTexture: function() {\r\n      var texture = phina.graphics.Canvas().setSize(512, 512);\r\n      var context = texture.context;\r\n      var g = context.createRadialGradient(32, 32, 0, 32, 32, 32);\r\n      g.addColorStop(0.0, \"rgba(255, 255, 255, 0.3)\");\r\n      g.addColorStop(0.6, \"rgba(255, 125,   0, 0.3)\");\r\n      g.addColorStop(1.0, \"rgba(255,   0,   0, 0.0)\");\r\n      context.fillStyle = g;\r\n      context.fillRect(0, 0, 64, 64);\r\n      return texture;\r\n    },\r\n\r\n    get: function() {\r\n      return this.pool.shift();\r\n    },\r\n\r\n    update: function() {\r\n      this.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    render: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.disable(gl.CULL_FACE);\r\n\r\n      this.uniforms.globalScale.value = 1.0;\r\n      this.draw(this._count);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  phina.define(\"glb.GLLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    renderChildBySelf: true,\r\n    ready: false,\r\n\r\n    domElement: null,\r\n    gl: null,\r\n\r\n    terrain: null,\r\n    itemDrawer: null,\r\n    effectSprites: null,\r\n    bulletSprites: null,\r\n    playerDrawer: null,\r\n    enemyDrawer: null,\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n      });\r\n      this.originX = 0;\r\n      this.originY = 0;\r\n\r\n      this.domElement = document.createElement(\"canvas\");\r\n      this.domElement.width = this.width * glb.GLLayer.quality;\r\n      this.domElement.height = this.height * glb.GLLayer.quality;\r\n\r\n      this.gl = this.domElement.getContext(\"webgl\");\r\n      this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n      this.gl.clearDepth(1.0);\r\n    },\r\n\r\n    start: function() {\r\n      var gl = this.gl;\r\n      var extInstancedArrays = phigl.Extensions.getInstancedArrays(gl);\r\n      var extVertexArrayObject = phigl.Extensions.getVertexArrayObject(gl);\r\n\r\n      this.terrain = glb.Terrain(gl, extInstancedArrays, this.width, this.height);\r\n      this.itemDrawer = glb.ObjDrawer(gl, extInstancedArrays, this.width, this.height);\r\n      this.effectSprites = glb.EffectSprites(gl, extInstancedArrays, this.width, this.height);\r\n      this.enemyDrawer = glb.ObjDrawer(gl, extInstancedArrays, this.width, this.height);\r\n      this.playerDrawer = glb.ObjDrawer(gl, extInstancedArrays, this.width, this.height);\r\n      this.bulletSprites = glb.BulletSprites(gl, extInstancedArrays, this.width, this.height);\r\n      \r\n      this.glowEffect = glb.GlowEffect(gl, this.domElement.width, this.domElement.height);\r\n\r\n      this.setupTerrain();\r\n    },\r\n\r\n    setupTerrain: function() {\r\n      var self = this;\r\n      var countX = glb.Terrain.countX;\r\n      var countZ = glb.Terrain.countZ;\r\n      var unit = glb.Terrain.unit;\r\n      Array.range(-countX, countX).forEach(function(x) {\r\n        Array.range(-countZ, countZ).forEach(function(z) {\r\n          var hex = self.terrain.get();\r\n          if (hex) {\r\n            hex\r\n              .spawn({\r\n                x: x * unit + z % 2,\r\n                y: 0,\r\n                z: z * unit * 1 / Math.sqrt(3) * 1.5,\r\n                rotX: (-90).toRadian(),\r\n                rotY: (90).toRadian(),\r\n                rotZ: 0,\r\n                scaleX: 1.2,\r\n                scaleY: 1.2,\r\n                scaleZ: 1.2,\r\n              })\r\n              .addChildTo(self);\r\n            if (Math.random() < 0.03) {\r\n              hex.on(\"enterframe\", function(e) {\r\n                this.y = (1.0 + Math.sin(e.app.ticker.frame * 0.01)) * 2.5;\r\n              });\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      this.ready = true;\r\n    },\r\n\r\n    update: function(app) {\r\n      if (!this.ready) return;\r\n\r\n      this.terrain.update(app);\r\n      this.itemDrawer.update(app);\r\n      this.effectSprites.update(app);\r\n      this.enemyDrawer.update(app);\r\n      this.playerDrawer.update(app);\r\n      this.bulletSprites.update(app);\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      if (!this.ready) return;\r\n\r\n      var gl = this.gl;\r\n\r\n      this.glowEffect.bindCurrent(0, 0, this.domElement.width, this.domElement.height);\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.playerDrawer.renderGlow();\r\n      this.enemyDrawer.renderGlow();\r\n      this.glowEffect.renderBefore();\r\n      gl.flush();\r\n\r\n      phigl.Framebuffer.unbind(gl);\r\n      gl.viewport(0, 0, this.domElement.width, this.domElement.height);\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.terrain.render();\r\n      this.itemDrawer.render();\r\n      // this.effectSprites.render();\r\n      this.enemyDrawer.render();\r\n      this.playerDrawer.render();\r\n      this.glowEffect.renderCurrent();\r\n      this.bulletSprites.render();\r\n      gl.flush();\r\n\r\n      var image = this.domElement;\r\n      canvas.context.drawImage(image, 0, 0, image.width, image.height, -this.width * this.originX, -this.height * this.originY, this.width, this.height);\r\n\r\n      this.glowEffect.switchFramebuffer();\r\n    },\r\n\r\n    _static: {\r\n      quality: 1.0,\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.GlowEffect\", {\r\n\r\n    gl: null,\r\n    current: null,\r\n    before: null,\r\n    drawer: null,\r\n\r\n    width: 0,\r\n    height: 0,\r\n\r\n    init: function(gl, w, h) {\r\n      this.gl = gl;\r\n      \r\n      var s = Math.max(Math.pow(2, ~~Math.log2(w) + 1), Math.pow(2, ~~Math.log2(h) + 1));\r\n\r\n      this.current = phigl.Framebuffer(gl, s, s);\r\n      this.before = phigl.Framebuffer(gl, s, s);\r\n\r\n      this.drawer = phigl.Drawable(gl)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"effect_blur\"))\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeData([\r\n          //\r\n          -1, +1, 0, h / this.current.height,\r\n          //\r\n          +1, +1, w / this.current.width, h / this.current.height,\r\n          //\r\n          -1, -1, 0, 0,\r\n          // \r\n          +1, -1, w / this.current.width, 0,\r\n        ])\r\n        .setUniforms(\"texture\", \"alpha\", \"canvasSize\");\r\n\r\n      this.copyDrawer = phigl.Drawable(gl)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"effect_copy\"))\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeData([\r\n          //\r\n          -1, +1, 0, h / this.current.height,\r\n          //\r\n          +1, +1, w / this.current.width, h / this.current.height,\r\n          //\r\n          -1, -1, 0, 0,\r\n          // \r\n          +1, -1, w / this.current.width, 0,\r\n        ])\r\n        .setUniforms(\"texture\", \"alpha\");\r\n\r\n      this.width = w;\r\n      this.height = h;\r\n    },\r\n\r\n    bindCurrent: function(viewportX, viewportY, viewportW, viewportH) {\r\n      this.current.bind(viewportX, viewportY, viewportW, viewportH);\r\n    },\r\n\r\n    renderCurrent: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n\r\n      this.drawer.uniforms.texture.setValue(0).setTexture(this.current.texture);\r\n      this.drawer.uniforms.alpha.value = 1.0;\r\n      this.drawer.uniforms.canvasSize.value = this.current.width;\r\n      this.drawer.draw();\r\n\r\n      return this;\r\n    },\r\n\r\n    renderBefore: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      this.copyDrawer.uniforms.texture.setValue(0).setTexture(this.before.texture);\r\n      this.copyDrawer.uniforms.alpha.value = 0.95;\r\n      this.copyDrawer.draw();\r\n\r\n      return this;\r\n    },\r\n\r\n    switchFramebuffer: function() {\r\n      var temp = this.current;\r\n      this.current = this.before;\r\n      this.before = temp;\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.LoadScene\", {\r\n    superClass: \"phina.display.DisplayScene\",\r\n\r\n    init: function(gl) {\r\n      this.superInit();\r\n      this.gl = gl;\r\n      this.totalCount = 0;\r\n      this.count = 0;\r\n\r\n      this.one(\"enter\", function() {\r\n        this.load();\r\n      });\r\n    },\r\n\r\n    onprogress: function() {\r\n      this.count += 1;\r\n      \r\n      // TODO\r\n      console.log(this.count + \"/\" + this.totalCount);\r\n    },\r\n\r\n    oncomplete: function() {\r\n      this.app.popScene();\r\n    },\r\n\r\n    load: function() {\r\n      var self = this;\r\n      var gl = this.gl;\r\n      var manager = phina.asset.AssetManager;\r\n\r\n      this.totalCount =\r\n        Object.keys(manager.assets[\"vertexShader\"]).length +\r\n        Object.keys(manager.assets[\"obj\"]).length +\r\n        Object.keys(manager.assets[\"image\"]).length;\r\n\r\n      var flows = [];\r\n\r\n      manager.assets[\"vertexShader\"].forIn(function(key, obj) {\r\n        var flow = phina.util.Flow(function(resolve) {\r\n          var name = key.replace(\".vs\", \"\");\r\n          var shader = phigl.Program(gl)\r\n            .attach(name + \".vs\")\r\n            .attach(name + \".fs\")\r\n            .link();\r\n\r\n          manager.set(\"shader\", name, shader);\r\n\r\n          self.flare(\"progress\");\r\n          resolve();\r\n        });\r\n\r\n        flows.push(flow);\r\n      });\r\n\r\n      manager.assets[\"obj\"].forIn(function(key, obj) {\r\n        var flow = phina.util.Flow(function(resolve) {\r\n          var attrData = obj.getAttributeData();\r\n          var edgeData = obj.getAttributeDataEdges();\r\n\r\n          var vbo = phigl.Vbo(gl).set(attrData);\r\n          var ibo = phigl.Ibo(gl).set(Array.range(attrData.length / 8));\r\n          var edgesVbo = phigl.Vbo(gl).set(edgeData);\r\n          var edgesIbo = phigl.Ibo(gl).set(Array.range(edgeData.length / 3));\r\n\r\n          manager.set(\"vbo\", key, vbo);\r\n          manager.set(\"ibo\", key, ibo);\r\n          manager.set(\"edgesVbo\", key, edgesVbo);\r\n          manager.set(\"edgesIbo\", key, edgesIbo);\r\n\r\n          self.flare(\"progress\");\r\n          resolve();\r\n        });\r\n\r\n        flows.push(flow);\r\n      });\r\n\r\n      manager.assets[\"image\"].forIn(function(key, image) {\r\n        var flow = phina.util.Flow(function(resolve) {\r\n          var texture = phigl.Texture(gl, image);\r\n\r\n          manager.set(\"texture\", key, texture);\r\n\r\n          self.flare(\"progress\");\r\n          resolve();\r\n        });\r\n\r\n        flows.push(flow);\r\n      });\r\n\r\n      phina.util.Flow.all(flows).then(function() {\r\n        self.flare(\"complete\");\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    deleteAll: function() {\r\n      var manager = phina.asset.AssetManager;\r\n      manager.assets.vbo.forIn(function(key, vbo) {\r\n        vbo.delete();\r\n      });\r\n      manager.assets.ibo.forIn(function(key, ibo) {\r\n        ibo.delete();\r\n      });\r\n      manager.assets.texture.forIn(function(key, texture) {\r\n        texture.delete();\r\n      });\r\n\r\n      manager.assets.vbo = {};\r\n      manager.assets.ibo = {};\r\n      manager.assets.texture = {};\r\n\r\n      return this;\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Obj\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n\r\n    position: null,\r\n    quaternion: null,\r\n    scale: null,\r\n    matrix: null,\r\n\r\n    dirty: true,\r\n\r\n    init: function(id, instanceData, instanceStride, objType) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n      this.index = id * instanceStride;\r\n      this.objType = objType;\r\n\r\n      this.position = vec3.create();\r\n      this.quaternion = quat.create();\r\n      this.scale = vec3.create();\r\n      this.matrix = mat4.create();\r\n    },\r\n\r\n    spawn: function(options) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n      this.age = 0;\r\n\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n      this.z = options.z;\r\n      this.scaleX = options.scaleX;\r\n      this.scaleY = options.scaleY;\r\n      this.scaleZ = options.scaleZ;\r\n\r\n      quat.identity(this.quaternion);\r\n      quat.rotateZ(this.quaternion, this.quaternion, options.rotZ);\r\n      quat.rotateY(this.quaternion, this.quaternion, options.rotY);\r\n      quat.rotateX(this.quaternion, this.quaternion, options.rotX);\r\n\r\n      instanceData[index + 0] = 1;\r\n\r\n      this.dirty = true;\r\n      this.update();\r\n\r\n      return this;\r\n    },\r\n    \r\n    update: function(app) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      if (this.dirty) {\r\n        mat4.fromRotationTranslationScale(this.matrix, this.quaternion, this.position, this.scale);\r\n        for (var i = 0; i < 16; i++) {\r\n          instanceData[index + i + 1] = this.matrix[i];\r\n        }\r\n        this.dirty = false;\r\n      }\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.instanceData[this.index + 0] = 0;\r\n    },\r\n\r\n    rotateX: function(rad) {\r\n      quat.rotateX(this.quaternion, this.quaternion, rad);\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n    rotateY: function(rad) {\r\n      quat.rotateY(this.quaternion, this.quaternion, rad);\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n    rotateZ: function(rad) {\r\n      quat.rotateZ(this.quaternion, this.quaternion, rad);\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n\r\n    lookAt: function(target) {\r\n      var mp = this.position;\r\n      var tp = target.position;\r\n\r\n      quat.identity(this.quaternion);\r\n      this.rotateZ(Math.atan2(tp[1] - mp[1], tp[0] - mp[0]));\r\n\r\n      var from = vec3.sub(vec3.create(), [tp[0], tp[1], 0], [mp[0], mp[1], 0]);\r\n      var to = vec3.sub(vec3.create(), tp, mp);\r\n      var q = quat.rotationTo(quat.create(), vec3.normalize(from, from), vec3.normalize(to, to));\r\n      quat.mul(this.quaternion, this.quaternion, q);\r\n\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n\r\n    _accessor: {\r\n      x: {\r\n        get: function() {\r\n          return this.position[0];\r\n        },\r\n        set: function(v) {\r\n          this.position[0] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      y: {\r\n        get: function() {\r\n          return this.position[1];\r\n        },\r\n        set: function(v) {\r\n          this.position[1] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      z: {\r\n        get: function() {\r\n          return this.position[2];\r\n        },\r\n        set: function(v) {\r\n          this.position[2] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      scaleX: {\r\n        get: function() {\r\n          return this.scale[0];\r\n        },\r\n        set: function(v) {\r\n          this.scale[0] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      scaleY: {\r\n        get: function() {\r\n          return this.scale[1];\r\n        },\r\n        set: function(v) {\r\n          this.scale[1] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      scaleZ: {\r\n        get: function() {\r\n          return this.scale[2];\r\n        },\r\n        set: function(v) {\r\n          this.scale[2] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.ObjAsset\", {\r\n    superClass: \"phina.asset.File\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n    },\r\n\r\n    getAttributeData: function(objectName, groupName) {\r\n      objectName = objectName || \"defaultObject\";\r\n      groupName = groupName || \"defaultGroup\";\r\n\r\n      var obj = globj.ObjParser.parse(this.data)[objectName].groups[groupName];\r\n\r\n      var trigons = [];\r\n      obj.faces.forEach(function(face) {\r\n        for (var i = 1; i < face.length - 1; i++) {\r\n          trigons.push(face[0]);\r\n          trigons.push(face[i + 0]);\r\n          trigons.push(face[i + 1]);\r\n        }\r\n      });\r\n\r\n      return trigons.map(function(vertex, i) {\r\n        var p = obj.positions[vertex.position - 1];\r\n        var t = obj.texCoords[vertex.texCoord - 1];\r\n        var n = obj.normals[vertex.normal - 1];\r\n        return [\r\n          // position\r\n          p.x, p.y, p.z,\r\n          // texCoord\r\n          t.u, 1.0 - t.v,\r\n          // normal\r\n          n.x, n.y, n.z\r\n        ];\r\n      }).flatten();\r\n    },\r\n\r\n    getAttributeDataEdges: function(objectName, groupName) {\r\n      objectName = objectName || \"defaultObject\";\r\n      groupName = groupName || \"defaultGroup\";\r\n\r\n      var obj = globj.ObjParser.parse(this.data)[objectName].groups[groupName];\r\n      var hashes = [];\r\n      var result = [];\r\n\r\n      return obj.faces\r\n        .map(function(face) {\r\n          var lines = [];\r\n          for (var i = 0; i < face.length - 1; i++) {\r\n            lines.push([face[i + 0].position, face[i + 1].position]);\r\n          }\r\n          lines.push([face.last.position, face.first.position]);\r\n          return lines;\r\n        })\r\n        .flatten(1)\r\n        .uniq(function(lhs, rhs) {\r\n          return lhs[0] === rhs[0] && lhs[1] === rhs[1];\r\n        })\r\n        .map(function(edge) {\r\n          var p0 = obj.positions[edge[0] - 1];\r\n          var p1 = obj.positions[edge[1] - 1];\r\n          return [\r\n            [p0.x, p0.y, p0.z],\r\n            [p1.x, p1.y, p1.z],\r\n          ];\r\n        })\r\n        .flatten();\r\n    },\r\n  });\r\n\r\n  phina.asset.AssetLoader.assetLoadFunctions[\"obj\"] = function(key, path) {\r\n    var shader = glb.ObjAsset();\r\n    return shader.load({\r\n      path: path,\r\n    });\r\n  };\r\n\r\n  var hash = function(p0, p1) {\r\n    var result = 1;\r\n    var prime = 2411;\r\n    result = prime * result + p0;\r\n    result = prime * result + p1;\r\n    return \"\" + result;\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.ObjDrawer\", {\r\n\r\n    gl: null,\r\n\r\n    objTypes: null,\r\n\r\n    counts: null,\r\n    instanceData: null,\r\n    ibos: null,\r\n    vbos: null,\r\n    textures: null,\r\n    pools: null,\r\n\r\n    faceDrawer: null,\r\n\r\n    cameraPosition: null,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.gl = gl;\r\n\r\n      this.objTypes = [];\r\n\r\n      this.counts = {};\r\n      this.instanceData = {};\r\n      this.ibos = {};\r\n      this.vbos = {};\r\n      this.textures = {};\r\n      this.pools = {};\r\n\r\n      this.faceDrawer = phigl.InstancedDrawable(gl, ext)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"obj\"))\r\n        .setAttributes(\"position\", \"uv\", \"normal\")\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"lightDirection\",\r\n          \"diffuseColor\",\r\n          \"ambientColor\",\r\n          \"cameraPosition\",\r\n          \"texture\"\r\n        );\r\n\r\n      this.glowDrawer = phigl.InstancedDrawable(gl, ext)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"objGlow\"))\r\n        .setAttributes(\"position\", \"uv\", \"normal\")\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\"\r\n        );\r\n\r\n      this.cameraPosition = vec3.set(vec3.create(), w / 2, h * 0.75, w * 1.5);\r\n      this.vMatrix = mat4.lookAt(mat4.create(), this.cameraPosition, [w / 2, h / 2, 0], [0, 1, 0]);\r\n      this.pMatrix = mat4.ortho(mat4.create(), -w / 2, w / 2, h / 2, -h / 2, 0.1, 3000);\r\n      this.vpMatrix = mat4.create();\r\n      this.lightDirection = vec3.set(vec3.create(), -1.0, 0.0, -1.0);\r\n      this.diffuseColor = [0.9, 0.9, 0.9, 1.0];\r\n      this.ambientColor = [0.4, 0.4, 0.4, 1.0];\r\n    },\r\n\r\n    addObjType: function(objType, count) {\r\n      count = count || 1;\r\n      var self = this;\r\n      var instanceStride = this.faceDrawer.instanceStride / 4;\r\n\r\n      if (!this.objTypes.contains(objType)) {\r\n        this.counts[objType] = count;\r\n        var instanceData = this.instanceData[objType] = Array.range(count).map(function(i) {\r\n          return [\r\n            // visible\r\n            0,\r\n            // m0\r\n            1, 0, 0, 0,\r\n            // m1\r\n            0, 1, 0, 0,\r\n            // m2\r\n            0, 0, 1, 0,\r\n            // m3\r\n            0, 0, 0, 1\r\n          ];\r\n        }).flatten();\r\n        this.ibos[objType] = phina.asset.AssetManager.get(\"ibo\", objType + \".obj\");\r\n        this.vbos[objType] = phina.asset.AssetManager.get(\"vbo\", objType + \".obj\");\r\n        this.textures[objType] = phina.asset.AssetManager.get(\"texture\", objType + \".png\");\r\n        this.pools[objType] = Array.range(count).map(function(id) {\r\n          return glb.Obj(id, instanceData, instanceStride, objType)\r\n            .on(\"removed\", function() {\r\n              self.pools[this.objType].push(this);\r\n            });\r\n        });\r\n\r\n        this.objTypes.push(objType);\r\n      }\r\n    },\r\n\r\n    get: function(objType) {\r\n      return this.pools[objType].shift();\r\n    },\r\n\r\n    update: function(app) {\r\n      mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\r\n      vec3.normalize(this.lightDirection, this.lightDirection);\r\n    },\r\n\r\n    render: function() {\r\n      var self = this;\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      this.faceDrawer.uniforms.vpMatrix.value = this.vpMatrix;\r\n      this.faceDrawer.uniforms.cameraPosition.value = this.cameraPosition;\r\n      this.faceDrawer.uniforms.lightDirection.value = this.lightDirection;\r\n      this.faceDrawer.uniforms.diffuseColor.value = this.diffuseColor;\r\n      this.faceDrawer.uniforms.ambientColor.value = this.ambientColor;\r\n\r\n      this.objTypes.forEach(function(objType) {\r\n        var count = self.counts[objType];\r\n        var instanceData = self.instanceData[objType];\r\n        var ibo = self.ibos[objType];\r\n        var vbo = self.vbos[objType];\r\n        var texture = self.textures[objType];\r\n\r\n        self.faceDrawer\r\n          .setIndexBuffer(ibo)\r\n          .setAttributeVbo(vbo)\r\n          .setInstanceAttributeData(instanceData);\r\n        self.faceDrawer.uniforms.texture.setValue(0).setTexture(texture);\r\n        self.faceDrawer.draw(count);\r\n      });\r\n    },\r\n\r\n    renderGlow: function() {\r\n      var self = this;\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      this.glowDrawer.uniforms.vpMatrix.value = this.vpMatrix;\r\n\r\n      this.objTypes.forEach(function(objType) {\r\n        var count = self.counts[objType];\r\n        var instanceData = self.instanceData[objType];\r\n        var ibo = self.ibos[objType];\r\n        var vbo = self.vbos[objType];\r\n        var texture = self.textures[objType];\r\n\r\n        self.glowDrawer\r\n          .setIndexBuffer(ibo)\r\n          .setAttributeVbo(vbo)\r\n          .setInstanceAttributeData(instanceData);\r\n        self.glowDrawer.uniforms.texture.setValue(0).setTexture(texture);\r\n        self.glowDrawer.draw(count);\r\n      });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Terrain\", {\r\n\r\n    gl: null,\r\n    faceDrawer: null,\r\n    edgeDrawer: null,\r\n\r\n    instanceData: null,\r\n    pool: null,\r\n    count: 0,\r\n\r\n    cameraPosition: null,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.gl = gl;\r\n      this.count = (glb.Terrain.countX * 2) * (glb.Terrain.countZ * 2);\r\n      this.faceDrawer = phigl.InstancedDrawable(gl, ext);\r\n      this.edgeDrawer = phigl.InstancedDrawable(gl, ext);\r\n      var instanceData = this.instanceData = [];\r\n      for (var i = 0; i < this.count; i++) {\r\n        instanceData.push(\r\n          // visible\r\n          0,\r\n          // m0\r\n          1, 0, 0, 0,\r\n          // m1\r\n          0, 1, 0, 0,\r\n          // m2\r\n          0, 0, 1, 0,\r\n          // m3\r\n          0, 0, 0, 1\r\n        );\r\n      }\r\n\r\n      this.faceDrawer\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"terrain\"))\r\n        .setIndexBuffer(phina.asset.AssetManager.get(\"ibo\", \"hex.obj\"))\r\n        .setAttributes(\"position\", \"uv\", \"normal\")\r\n        .setAttributeVbo(phina.asset.AssetManager.get(\"vbo\", \"hex.obj\"))\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"lightDirection\",\r\n          \"diffuseColor\",\r\n          \"ambientColor\",\r\n          \"cameraPosition\"\r\n        );\r\n\r\n      this.edgeDrawer\r\n        .setDrawMode(gl.LINES)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"terrainEdge\"))\r\n        .setIndexBuffer(phina.asset.AssetManager.get(\"edgesIbo\", \"hex.obj\"))\r\n        .setAttributes(\"position\")\r\n        .setAttributeVbo(phina.asset.AssetManager.get(\"edgesVbo\", \"hex.obj\"))\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"cameraPosition\",\r\n          \"color\"\r\n        );\r\n\r\n      var instanceStride = this.edgeDrawer.instanceStride / 4;\r\n\r\n      this.cameraPosition = vec3.create();\r\n      vec3.set(this.cameraPosition, 6, 20, 20);\r\n      var vMatrix = mat4.lookAt(mat4.create(), this.cameraPosition, [0, 0, 0], [0, 1, 0]);\r\n      var pMatrix = mat4.perspective(mat4.create(), 45, w / h, 0.1, 10000);\r\n      this.faceDrawer.uniforms.vpMatrix.value = mat4.mul(mat4.create(), pMatrix, vMatrix);\r\n      this.faceDrawer.uniforms.cameraPosition.value = this.cameraPosition;\r\n      this.edgeDrawer.uniforms.vpMatrix.value = mat4.mul(mat4.create(), pMatrix, vMatrix);\r\n      this.edgeDrawer.uniforms.cameraPosition.value = this.cameraPosition;\r\n\r\n      this.lightDirection = vec3.set(vec3.create(), 2, 0.5, 0);\r\n      this.faceDrawer.uniforms.lightDirection.value = vec3.normalize(vec3.create(), this.lightDirection);\r\n      this.faceDrawer.uniforms.diffuseColor.value = [0.22, 0.22, 0.22 * 1.6, 0.65];\r\n      this.faceDrawer.uniforms.ambientColor.value = [0.05, 0.05, 0.05, 1.0];\r\n      this.edgeDrawer.uniforms.color.value = [0.5, 0.5, 0.5 * 1.2, 1.0];\r\n\r\n      var self = this;\r\n      this.pool = Array.range(0, this.count).map(function(id) {\r\n        return glb.Obj(id, instanceData, instanceStride)\r\n          .on(\"enterframe\", function() {\r\n            this.x += self.cameraPosition[0] * 0.025;\r\n            this.z += self.cameraPosition[2] * 0.025;\r\n\r\n            var countX = glb.Terrain.countX;\r\n            var countZ = glb.Terrain.countZ;\r\n            var unit = glb.Terrain.unit;\r\n            if (this.x < -countX * unit) this.x += countX * unit * 2;\r\n            else if (countX * unit < this.x) this.x -= countX * unit * 2;\r\n            if (this.z < -countZ * unit * 1 / Math.sqrt(3) * 1.5) this.z += countZ * unit * 1 / Math.sqrt(3) * 1.5 * 2;\r\n            else if (countZ * unit * 1 / Math.sqrt(3) * 1.5 < this.z) this.z -= countZ * unit * 1 / Math.sqrt(3) * 1.5 * 2;\r\n          })\r\n          .on(\"removed\", function() {\r\n            self.pool.push(this);\r\n          });\r\n      });\r\n\r\n      this.faceDrawer.setInstanceAttributeData(this.instanceData);\r\n      this.edgeDrawer.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    update: function(app) {\r\n      var f = app.ticker.frame * 0.001;\r\n      this.lightDirection = vec3.set(this.lightDirection, Math.cos(f * 5) * 1, 0.5, Math.sin(f * 5) * 1);\r\n      vec3.normalize(this.lightDirection, this.lightDirection);\r\n      this.faceDrawer.uniforms.lightDirection.value = this.lightDirection;\r\n\r\n      this.faceDrawer.setInstanceAttributeData(this.instanceData);\r\n      this.edgeDrawer.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    get: function() {\r\n      return this.pool.shift();\r\n    },\r\n\r\n    render: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.enable(gl.CULL_FACE);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      gl.cullFace(gl.FRONT);\r\n\r\n      this.edgeDrawer.draw(this.count);\r\n      this.faceDrawer.draw(this.count);\r\n    },\r\n\r\n    _static: {\r\n      countX: 12,\r\n      countZ: 22,\r\n      unit: 2.05,\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  /**\r\n   * @param {Function} [fn] return true if lhs and rhs are equivalence.\r\n   */\r\n  Array.prototype.$method(\"uniq\", function(fn) {\r\n    if (fn) {\r\n      return this.filter(function(me, index, self) {\r\n        return !self.slice(0, index).some(function(another) {\r\n          return fn(me, another);\r\n        });\r\n      });\r\n    } else {\r\n      return this.filter(function(value, index, self) {\r\n        return self.indexOf(value) === index;\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/source/"}