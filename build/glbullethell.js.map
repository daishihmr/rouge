{"version":3,"sources":["main.js","NumberSprite.js","ScorePanel.js","UILayer.js","Bullet.js","BulletDrawer.js","Camera.js","Collisions.js","EnemySpawner.js","Explosion.js","GLLayer.js","GlowEffect.js","Laser.js","Obj.js","ObjAsset.js","ObjDrawer.js","Player.js","Pool.js","PostProcessing.js","Shot.js","Sprite.js","SpriteDrawer.js","TerrainDrawer.js","TextureAsset.js","Assets.js","Danmaku.js","Enemy.js","EnemyS1.js","DownloadScene.js","ErrorScene.js","LoadScene.js","SceneFlow.js","StageScene.js","Stage.js","Stage1.js","Utils.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrnzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClnnzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvrnrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"glbullethell.js","sourcesContent":["var SCREEN_WIDTH = 720;\r\nvar SCREEN_HEIGHT = 1080;\r\nvar OBJ_SCALE = 30.0;\r\n\r\nphina.namespace(function() {\r\n\r\n  phina.input.Keyboard.KEY_CODE[\"SHOT\"] = phina.input.Keyboard.KEY_CODE[\"z\"];\r\n  phina.input.Keyboard.KEY_CODE[\"BOMB\"] = phina.input.Keyboard.KEY_CODE[\"x\"];\r\n  phina.input.Keyboard.KEY_CODE[\"LASER\"] = phina.input.Keyboard.KEY_CODE[\"c\"];\r\n  phina.input.Gamepad.BUTTON_CODE[\"SHOT\"] = phina.input.Gamepad.BUTTON_CODE[\"R2\"];\r\n  phina.input.Gamepad.BUTTON_CODE[\"BOMB\"] = phina.input.Gamepad.BUTTON_CODE[\"a\"];\r\n  phina.input.Gamepad.BUTTON_CODE[\"LASER\"] = phina.input.Gamepad.BUTTON_CODE[\"x\"];\r\n\r\n  var canvas = document.createElement(\"canvas\");\r\n  var gl = null;\r\n  try {\r\n    gl = canvas.getContext(\"webgl\");\r\n  } catch (e) {\r\n    gl = null;\r\n    glb.ErrorScene.message = \"WebGL not supported\";\r\n  }\r\n\r\n  phina.main(function() {\r\n    phina.display.Label.defaults.fontFamily = \"Aldrich\";\r\n\r\n    phina.asset.AssetLoader()\r\n      .on(\"load\", function() { start() })\r\n      .load({ font: { \"Aldrich\": \"./asset/font/Aldrich/Aldrich-Regular.ttf\" } });\r\n  });\r\n\r\n  var start = function() {\r\n    var app = phina.display.CanvasApp({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n        fps: 30,\r\n      })\r\n      .replaceScene(gl ? glb.SceneFlow({ canvas: canvas, gl: gl }) : glb.ErrorScene())\r\n      .enableStats()\r\n      .run();\r\n\r\n    app.gamepadManager = phina.input.GamepadManager();\r\n    app.update = function() {\r\n      this.gamepadManager.update();\r\n    };\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"strike.NumberSpriteArray\", {\r\n    superClass: \"phina.display.DisplayElement\",\r\n\r\n    sprites: null,\r\n    commas: null,\r\n    digit: 0,\r\n\r\n    _value: 0,\r\n\r\n    init: function(options) {\r\n      options = {}.$extend({\r\n        digit: 8,\r\n      }, options);\r\n\r\n      this.digit = options.digit;\r\n\r\n      this.sprites = Array.range(0, options.digit).map(function() {\r\n        return strike.NumberSprite(options)\r\n          .setOrigin(0, 0);\r\n      });\r\n\r\n      this.superInit({\r\n        width: this.sprites[0].width * options.digit,\r\n        height: options.fontSize,\r\n      });\r\n\r\n      var self = this;\r\n      this.sprites.forEach(function(s, i, all) {\r\n        s.x += (all.length - i - 1) * s.width;\r\n        s.addChildTo(self);\r\n      });\r\n\r\n      this.commas = [];\r\n      for (var i = 1; i < this.digit / 3; i++) {\r\n        var c = phina.display.Label({\r\n            text: \",\",\r\n          }.$extend(options))\r\n          .setPosition((this.digit - i * 3) * this.sprites[0].width, this.sprites[0].height * 0.5)\r\n          .addChildTo(this);\r\n        this.commas.push(c);\r\n      }\r\n    },\r\n\r\n    setValue: function(num) {\r\n      this._value = num;\r\n      var n = Math.floor(num);\r\n\r\n      var s = (\"\" + n).length / 3 - 1;\r\n      this.commas.forEach(function(c, i) {\r\n        c.visible = i < s;\r\n      });\r\n\r\n      for (var i = 0; i < this.digit; i++) {\r\n        if (n === 0) {\r\n          this.sprites[i].visible = false;\r\n        } else {\r\n          this.sprites[i].visible = true;\r\n          this.sprites[i].frameIndex = n % 10;\r\n        }\r\n        n = Math.floor(n / 10);\r\n      }\r\n    },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return this._value;\r\n        },\r\n        set: function(v) {\r\n          this.setValue(v);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  phina.define(\"strike.NumberSprite\", {\r\n    superClass: \"phina.display.Sprite\",\r\n\r\n    init: function(options) {\r\n      options = {}.$extend({\r\n        fontSize: 20,\r\n        fontFamily: \"sans-serif\",\r\n        fill: \"white\",\r\n        stroke: null,\r\n        fontWeight: \"\",\r\n      }, options);\r\n\r\n      var canvas = phina.graphics.Canvas();\r\n      var context = canvas.context;\r\n\r\n      this.unitWidth = Array.range(0, 10)\r\n        .map(function(i) {\r\n          context.font = \"{fontWeight} {fontSize}px '{fontFamily}'\".format(options);\r\n          return context.measureText(\"\" + i).width;\r\n        })\r\n        .sort(function(lhs, rhs) {\r\n          return lhs - rhs;\r\n        })\r\n        .map(function(w) {\r\n          return w;\r\n        })\r\n        .last + 1 | 0;\r\n\r\n      this.unitWidth *= 1.15;\r\n\r\n      var w = this.unitWidth * 10;\r\n      var h = options.fontSize;\r\n      canvas.setSize(Math.pow(2, Math.log2(w) + 1 | 0), Math.pow(2, Math.log2(h) + 1 | 0));\r\n\r\n      context.font = \"{fontWeight} {fontSize}px '{fontFamily}'\".format(options);\r\n      context.fillStyle = options.fill;\r\n      context.strokeStyle = options.stroke;\r\n      context.textAlign = \"center\"\r\n      context.textBaseline = \"middle\";\r\n      for (var i = 0; i < 10; i++) {\r\n        if (options.fill) context.fillText(\"\" + i, this.unitWidth * (0.5 + i), h / 2);\r\n        if (options.stroke) context.strokeText(\"\" + i, w * (0.5 + i), h / 2);\r\n      }\r\n\r\n      this.superInit(canvas, this.unitWidth, h);\r\n      this.setFrameIndex(0);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.ScorePanel\", {\r\n    superClass: \"phina.display.DisplayElement\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.fromJSON({\r\n        originX: 0,\r\n        originY: 0,\r\n        children: {\r\n          \r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.UILayer\", {\r\n    superClass: \"phina.display.DisplayElement\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n      });\r\n      this.fromJSON({\r\n        originX: 0,\r\n        originY: 0,\r\n        children: {\r\n          scorePanel: { className: \"glb.ScorePanel\" },\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Bullet\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n    runner: null,\r\n\r\n    x: 0,\r\n    y: 0,\r\n    age: 0,\r\n\r\n    power: 0,\r\n\r\n    _active: false,\r\n    \r\n    radius: 20,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(runner, option) {\r\n      var instanceData = this.instanceData;\r\n      var index = this.index;\r\n\r\n      this.runner = runner;\r\n      this.x = runner.x;\r\n      this.y = runner.y;\r\n      this.age = 0;\r\n      instanceData[index + 0] = this.x;\r\n      instanceData[index + 1] = this.y;\r\n      instanceData[index + 2] = runner.direction; // rotation\r\n      instanceData[index + 3] = 1.8; // scale\r\n      instanceData[index + 4] = option.type % 8; // frame.x\r\n      instanceData[index + 5] = ~~(option.type / 8); // frame.y\r\n      instanceData[index + 6] = 1; // visible\r\n      instanceData[index + 7] = 1; // brightness\r\n      instanceData[index + 8] = 0.2 + ~~(option.type / 8) % 2; // auraColor.r\r\n      instanceData[index + 9] = 0.2 + 0; // auraColor.g\r\n      instanceData[index + 10] = 0.2 + ~~(option.type / 8) % 2 + 1; // auraColor.b\r\n\r\n      var self = this;\r\n      runner.onVanish = function() {\r\n        self.remove();\r\n      };\r\n\r\n      return this;\r\n    },\r\n\r\n    activate: function() {\r\n      this._active = true;\r\n      this.flare(\"activated\");\r\n      return this;\r\n    },\r\n\r\n    inactivate: function() {\r\n      this._active = false;\r\n      this.flare(\"inactivated\");\r\n      return this;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.instanceData[this.index + 6] = 0;\r\n    },\r\n\r\n    update: function(app) {\r\n      var instanceData = this.instanceData;\r\n      var index = this.index;\r\n      var runner = this.runner;\r\n\r\n      runner.update();\r\n      this.x = runner.x;\r\n      this.y = runner.y;\r\n\r\n      if (this.x < -100 || SCREEN_WIDTH + 100 < this.x || this.y < -100 || SCREEN_HEIGHT + 100 < this.y) {\r\n        this.remove();\r\n        return;\r\n      }\r\n\r\n      instanceData[index + 0] = this.x;\r\n      instanceData[index + 1] = this.y;\r\n      instanceData[index + 7] = 1.5 + Math.sin(this.age * 0.2) * 0.6;\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    hitPlayer: function(player) {\r\n      // TODO\r\n      this.remove();\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  phina.define(\"glb.BulletDrawer\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    instanceData: null,\r\n\r\n    pool: null,\r\n    _count: 2000,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.superInit(gl, ext);\r\n      this\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"bullets\"))\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -16, +16,\r\n            //\r\n            +16, +16,\r\n            //\r\n            -16, -16,\r\n            //\r\n            +16, -16,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 32 / 256,\r\n            //\r\n            32 / 256, 32 / 256,\r\n            //\r\n            0, 0,\r\n            //\r\n            32 / 256, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceVisible\",\r\n          \"instanceBrightness\",\r\n          \"instanceAuraColor\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\",\r\n          \"globalScale\"\r\n        );\r\n\r\n      var instanceUnit = this.instanceStride / 4;\r\n\r\n      this.uniforms.texture.setValue(0).setTexture(phina.asset.AssetManager.get(\"texture\", \"bullets.png\"));\r\n      this.uniforms.globalScale.setValue(1.0);\r\n\r\n      var instanceData = this.instanceData = [];\r\n      for (var i = 0; i < this._count; i++) {\r\n        instanceData.push(\r\n          // position\r\n          0, 0,\r\n          // rotation\r\n          0,\r\n          // scale\r\n          1,\r\n          // frame\r\n          0, 0,\r\n          // visible\r\n          0,\r\n          // brightness\r\n          0,\r\n          // auraColor\r\n          0, 0, 0\r\n        );\r\n      }\r\n      this.setInstanceAttributeData(instanceData);\r\n\r\n      var self = this;\r\n      this.pool = Array.range(0, this._count)\r\n        .map(function(id) {\r\n          return glb.Bullet(id, instanceData, instanceUnit)\r\n            .on(\"removed\", function() {\r\n              self.pool.add(this);\r\n            });\r\n        })\r\n        .toPool(function(lhs, rhs) {\r\n          return lhs.id - rhs.id;\r\n        });\r\n    },\r\n\r\n    get: function() {\r\n      return this.pool.get();\r\n    },\r\n\r\n    update: function(app) {\r\n      this.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    render: function(uniforms) {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      gl.disable(gl.DEPTH_TEST);\r\n\r\n      this.uniforms.globalScale.value = 1.0;\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.uniforms[key]) this.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n\r\n      this.draw(this._count);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Camera\", {\r\n\r\n    position: null,\r\n    vMatrix: null,\r\n    pMatrix: null,\r\n    vpMatrix: null,\r\n\r\n    init: function() {\r\n      this.position = vec3.create();\r\n      this.vMatrix = mat4.create();\r\n      this.pMatrix = mat4.create();\r\n      this.vpMatrix = mat4.create();\r\n    },\r\n\r\n    setPosition: function(x, y, z) {\r\n      vec3.set(this.position, x, y, z);\r\n      return this;\r\n    },\r\n\r\n    lookAt: function(x, y, z) {\r\n      mat4.lookAt(this.vMatrix, this.position, [x, y, z], [0, 1, 0]);\r\n      return this;\r\n    },\r\n\r\n    ortho: function(left, right, bottom, top, near, far) {\r\n      mat4.ortho(this.pMatrix, left, right, bottom, top, near, far);\r\n      return this;\r\n    },\r\n\r\n    perspective: function(fovy, aspect, near, far) {\r\n      mat4.perspective(this.pMatrix, fovy, aspect, near, far);\r\n      return this;\r\n    },\r\n\r\n    calcVpMatrix: function() {\r\n      mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\r\n      return this;\r\n    },\r\n\r\n    uniformValues: function() {\r\n      return {\r\n        vpMatrix: this.vpMatrix,\r\n        cameraPosition: this.position,\r\n      };\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Collisions\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    player: null,\r\n    bullets: null,\r\n    enemies: null,\r\n    shots: null,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n\r\n      this.player = null;\r\n      this.bullets = [];\r\n      this.enemies = [];\r\n      this.shots = [];\r\n    },\r\n\r\n    setPlayer: function(v) {\r\n      this.player = v;\r\n      v.on(\"inactivated\", function() {\r\n        this.player = null;\r\n      }.bind(this));\r\n      v.on(\"removed\", function() {\r\n        this.player = null;\r\n      }.bind(this));\r\n    },\r\n\r\n    addBullet: function(v) {\r\n      this.bullets.push(v);\r\n      v.on(\"inactivated\", function() {\r\n        this.bullets.erase(v);\r\n      }.bind(this));\r\n      v.on(\"removed\", function() {\r\n        this.bullets.erase(v);\r\n      }.bind(this));\r\n    },\r\n\r\n    addEnemy: function(v) {\r\n      this.enemies.push(v);\r\n      v.on(\"inactivated\", function() {\r\n        this.enemies.erase(v);\r\n      }.bind(this));\r\n      v.on(\"removed\", function() {\r\n        this.enemies.erase(v);\r\n      }.bind(this));\r\n    },\r\n\r\n    addShot: function(v) {\r\n      this.shots.push(v);\r\n      v.on(\"inactivated\", function() {\r\n        this.shots.erase(v);\r\n      }.bind(this));\r\n      v.on(\"removed\", function() {\r\n        this.shots.erase(v);\r\n      }.bind(this));\r\n    },\r\n\r\n    update: function(app) {\r\n      this._hitTestShotEnemy();\r\n      this._hitTestPlayerBullet();\r\n      this._hitTestPlayerEnemy();\r\n    },\r\n\r\n    _hitTestShotEnemy: function() {\r\n      var ss = this.shots.clone();\r\n      var es = this.enemies.clone();\r\n      var s;\r\n      var e;\r\n      for (var j = 0, jl = es.length; j < jl; j++) {\r\n        e = es[j];\r\n\r\n        if (e.muteki || !e.visible || e.mutekiTime > 0 || e.hp <= 0) continue;\r\n\r\n        for (var i = 0, il = ss.length; i < il; i++) {\r\n          s = ss[i];\r\n\r\n          if (this._hitTestLineCircle(s, e)) {\r\n            e.hitShot(s);\r\n            s.hitEnemy(e);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    _hitTestPlayerBullet: function() {\r\n      var p = this.player;\r\n      var bs = this.bullets.clone();\r\n\r\n      if (p.muteki || !p.visible || p.mutekiTime > 0 || p.hp <= 0) return;\r\n\r\n      var b;\r\n      for (var i = 0, il = bs.length; i < il; i++) {\r\n        b = bs[i];\r\n        if ((p.x - b.x) * (p.x - b.x) + (p.y - b.y) * (p.y - b.y) < b.radius * b.radius) {\r\n          p.hitBullet(b);\r\n          b.hitPlayer(p);\r\n        }\r\n      }\r\n    },\r\n\r\n    _hitTestPlayerEnemy: function() {\r\n      var p = this.player;\r\n      var es = this.enemies.clone();\r\n\r\n      if (p.muteki || !p.visible || p.mutekiTime > 0 || p.hp > 0) return;\r\n\r\n      var e;\r\n      for (var i = 0, il = es.length; i < il; i++) {\r\n        e = es[i];\r\n        if ((p.x - e.x) * (p.x - e.x) + (p.y - e.y) * (p.y - e.y) < e.radius * e.radius) {\r\n          p.hitEnemy(e);\r\n          e.hitPlayer(p);\r\n        }\r\n      }\r\n    },\r\n\r\n    _hitTestLineCircle: function(line, circle) {\r\n      vec2.sub(ap, [circle.x, circle.y], [line.bx, line.by]);\r\n      vec2.sub(bp, [circle.x, circle.y], [line.x, line.y]);\r\n      vec2.sub(s, [line.x, line.y], [line.bx, line.by]);\r\n\r\n      var radius = circle.radius;\r\n      var radiusSq = radius * radius;\r\n\r\n      if (vec2.squaredLength(ap) <= radiusSq || vec2.squaredLength(bp) <= radiusSq) {\r\n        return true;\r\n      } else {\r\n        vec2.cross(cross, s, ap);\r\n        return vec3.length(cross) / vec2.length(s) <= radius &&\r\n          vec2.dot(ap, s) * vec2.dot(bp, s) <= 0;\r\n      }\r\n    },\r\n\r\n  });\r\n\r\n  var ap = vec2.create();\r\n  var bp = vec2.create();\r\n  var s = vec2.create();\r\n  var cross = vec3.create();\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.EnemySpawner\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    init: function(options) {\r\n      this.superInit();\r\n\r\n      this.name = options.name;\r\n      this.pattern = options.pattern;\r\n      this.runner = options.runner;\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n\r\n      // TODO\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Explosion\", {\r\n\r\n    glLayer: null,\r\n\r\n    init: function(glLayer) {\r\n      this.glLayer = glLayer;\r\n    },\r\n    \r\n    spark: function(x, y) {\r\n      var glLayer = this.glLayer;\r\n      \r\n      (1).times(function() {\r\n        var e = glLayer.spriteDrawer.get(\"effect\");\r\n\r\n        if (!e) return;\r\n        var a = Math.randfloat(0, Math.PI * 2);\r\n        var r = Math.randfloat(75, 125);\r\n        var s = Math.randfloat(0.1, 0.2);\r\n        e\r\n          .spawn({\r\n            x: x + Math.cos(a) * r * 0.1,\r\n            y: y + Math.sin(a) * r * 0.1,\r\n            rotation: 0,\r\n            scaleX: s,\r\n            scaleY: s,\r\n            alpha: 5,\r\n          })\r\n          .addChildTo(glLayer);\r\n\r\n        e.tweener\r\n          .clear()\r\n          .to({\r\n            x: x + Math.cos(a) * r,\r\n            y: y + Math.sin(a) * r,\r\n            alpha: 0,\r\n          }, 666, \"easeOutQuart\")\r\n          .call(function() {\r\n            e.remove();\r\n          });\r\n      });\r\n    },\r\n\r\n    small: function(x, y) {\r\n      var glLayer = this.glLayer;\r\n\r\n      (7).times(function() {\r\n        var e = glLayer.spriteDrawer.get(\"effect\");\r\n        if (!e) return;\r\n\r\n        var a = Math.randfloat(0, Math.PI * 2);\r\n        var r = Math.randfloat(30, 45);\r\n        e\r\n          .spawn({\r\n            x: x + Math.cos(a) * r * 0.2,\r\n            y: y + Math.sin(a) * r * 0.2,\r\n            rotation: 0,\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            alpha: 1,\r\n            frameX: 0,\r\n            frameY: 0,\r\n          })\r\n          .addChildTo(glLayer);\r\n\r\n        e.tweener\r\n          .clear()\r\n          .to({\r\n            x: x + Math.cos(a) * r,\r\n            y: y + Math.sin(a) * r,\r\n            scaleX: 3,\r\n            scaleY: 3,\r\n            alpha: 0,\r\n          }, 333, \"easeOutQuad\")\r\n          .call(function() {\r\n            e.remove();\r\n          });\r\n      });\r\n\r\n      (2).times(function() {\r\n        var e = glLayer.spriteDrawer.get(\"effect\");\r\n\r\n        if (!e) return;\r\n        var a = Math.randfloat(0, Math.PI * 2);\r\n        var r = Math.randfloat(75, 125);\r\n        var s = Math.randfloat(0.2, 0.4);\r\n        e\r\n          .spawn({\r\n            x: x + Math.cos(a) * r * 0.1,\r\n            y: y + Math.sin(a) * r * 0.1,\r\n            rotation: 0,\r\n            scaleX: s,\r\n            scaleY: s,\r\n            alpha: 5,\r\n            frameX: 0,\r\n            frameY: 0,\r\n          })\r\n          .addChildTo(glLayer);\r\n\r\n        e.tweener\r\n          .clear()\r\n          .to({\r\n            x: x + Math.cos(a) * r,\r\n            y: y + Math.sin(a) * r,\r\n            alpha: 0,\r\n          }, 666, \"easeOutQuad\")\r\n          .call(function() {\r\n            e.remove();\r\n          });\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  phina.define(\"glb.GLLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    renderChildBySelf: true,\r\n    ready: false,\r\n\r\n    domElement: null,\r\n    gl: null,\r\n\r\n    orthoCamera: null,\r\n    perseCamera: null,\r\n\r\n    terrain: null,\r\n    itemDrawer: null,\r\n    spriteDrawer: null,\r\n    bulletDrawer: null,\r\n    playerDrawer: null,\r\n    enemyDrawer: null,\r\n\r\n    framebufferMain: null,\r\n    framebufferZoom: null,\r\n\r\n    ppZoom: null,\r\n    ppCopy: null,\r\n\r\n    zoomCenterX: 0,\r\n    zoomCenterY: 0,\r\n    zoomStrength: 0,\r\n    zoomAlpha: 0,\r\n\r\n    init: function(options) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n      });\r\n      this.originX = 0;\r\n      this.originY = 0;\r\n\r\n      this.domElement = options.canvas;\r\n      this.domElement.width = this.width * glb.GLLayer.quality;\r\n      this.domElement.height = this.height * glb.GLLayer.quality;\r\n\r\n      var gl = this.gl = options.gl;\r\n      var extInstancedArrays = phigl.Extensions.getInstancedArrays(gl);\r\n      var extVertexArrayObject = phigl.Extensions.getVertexArrayObject(gl);\r\n\r\n      gl.viewport(0, 0, this.domElement.width, this.domElement.height);\r\n      gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n      gl.clearDepth(1.0);\r\n      gl.disable(gl.CULL_FACE);\r\n\r\n      var cw = this.domElement.width;\r\n      var ch = this.domElement.height;\r\n      var w = this.width;\r\n      var h = this.height;\r\n      var sw = Math.pow(2, ~~Math.log2(cw) + 1);\r\n      var sh = Math.pow(2, ~~Math.log2(ch) + 1);\r\n      var q = glb.GLLayer.quality;\r\n\r\n      this.orthoCamera = glb.Camera()\r\n        .setPosition(w * 0.5, h * 0.5, w * 1.5)\r\n        .lookAt(w * 0.5, h * 0.5, 0)\r\n        .ortho(-w * 0.5, w * 0.5, h * 0.5, -h * 0.5, 0.1, 3000)\r\n        .calcVpMatrix();\r\n\r\n      this.perseCamera = glb.Camera()\r\n        .setPosition(6, 20, 20)\r\n        .lookAt(0, 0, 0)\r\n        .perspective(45, w / h, 0.1, 10000)\r\n        .calcVpMatrix();\r\n\r\n      this.terrain = glb.TerrainDrawer(gl, extInstancedArrays, w, h);\r\n      this.itemDrawer = glb.ObjDrawer(gl, extInstancedArrays, w, h);\r\n      this.spriteDrawer = glb.SpritDrawer(gl, extInstancedArrays, w, h);\r\n      this.enemyDrawer = glb.ObjDrawer(gl, extInstancedArrays, w, h);\r\n      this.playerDrawer = glb.ObjDrawer(gl, extInstancedArrays, w, h);\r\n      this.bulletDrawer = glb.BulletDrawer(gl, extInstancedArrays, w, h);\r\n\r\n      this.framebufferGlow = phigl.Framebuffer(gl, sw, sh);\r\n      this.framebufferZanzo1 = phigl.Framebuffer(gl, sw, sh);\r\n      this.framebufferZanzo2 = phigl.Framebuffer(gl, sw, sh);\r\n      this.framebufferMain = phigl.Framebuffer(gl, sw, sh);\r\n      this.framebufferZoom = phigl.Framebuffer(gl, sw, sh);\r\n\r\n      this.ppZoom = glb.PostProcessing(gl, cw, ch, \"postproccess_zoom\", [\"canvasSize\", \"center\", \"strength\"]);\r\n      this.ppCopy = glb.PostProcessing(gl, cw, ch, \"postproccess_copy\", [\"alpha\"]);\r\n      this.ppBlur = glb.PostProcessing(gl, cw, ch, \"postproccess_blur\");\r\n\r\n      this.setupTerrain();\r\n      this.generateObjects();\r\n      this.ready = true;\r\n    },\r\n\r\n    setupTerrain: function() {\r\n      var self = this;\r\n      var countX = glb.TerrainDrawer.countX;\r\n      var countZ = glb.TerrainDrawer.countZ;\r\n      var unit = glb.TerrainDrawer.unit;\r\n      Array.range(-countX, countX).forEach(function(x) {\r\n        Array.range(-countZ, countZ).forEach(function(z) {\r\n          var hex = self.terrain.get();\r\n          if (hex) {\r\n            hex\r\n              .spawn({\r\n                visible: true,\r\n                x: x * unit + z % 2,\r\n                y: 0,\r\n                z: z * unit * 1 / Math.sqrt(3) * 1.5,\r\n                rotX: (-90).toRadian(),\r\n                rotY: (90).toRadian(),\r\n                rotZ: 0,\r\n                scaleX: 1.2,\r\n                scaleY: 1.2,\r\n                scaleZ: 1.2,\r\n              })\r\n              .addChildTo(self);\r\n            if (Math.random() < 0.03) {\r\n              hex.on(\"enterframe\", function(e) {\r\n                this.y = (1.0 + Math.sin(e.app.ticker.frame * 0.01)) * 2.5;\r\n              });\r\n            }\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    generateObjects: function() {\r\n      this.playerDrawer.addObjType(\"fighter\", \"fighter\", 1, \"glb.Player\");\r\n      this.playerDrawer.addObjType(\"bit\", \"bit\", 4);\r\n      this.playerDrawer.addObjType(\"bitJoin\", \"bitJoin\", 1);\r\n      this.playerDrawer.addObjType(\"barrier\", \"barrier\", 1);\r\n      this.spriteDrawer.addObjType(\"shot\", \"effect\", 160, \"glb.Shot\");\r\n      this.spriteDrawer.addObjType(\"laser\", \"effect\", 20, \"glb.Laser\");\r\n      this.spriteDrawer.addObjType(\"effect\", \"effect\", 3000);\r\n    },\r\n\r\n    update: function(app) {\r\n      if (!this.ready) return;\r\n\r\n      this.terrain.update(app);\r\n      this.itemDrawer.update(app);\r\n      this.spriteDrawer.update(app);\r\n      this.enemyDrawer.update(app);\r\n      this.playerDrawer.update(app);\r\n      this.bulletDrawer.update(app);\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      if (!this.ready) return;\r\n\r\n      var gl = this.gl;\r\n      var image = this.domElement;\r\n      var cw = image.width;\r\n      var ch = image.height;\r\n\r\n      var ou = this.orthoCamera.uniformValues();\r\n      var pu = this.perseCamera.uniformValues();\r\n\r\n      this.framebufferGlow.bind();\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.enemyDrawer.renderGlow(ou);\r\n      this.playerDrawer.renderGlow(ou);\r\n\r\n      this.framebufferZanzo1.bind();\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.ppCopy.render(this.framebufferZanzo2.texture, { alpha: 0.85 }, true);\r\n      this.ppBlur.render(this.framebufferGlow.texture, null, true);\r\n\r\n      this.framebufferMain.bind();\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.terrain.render({\r\n        diffuseColor: [0.2, 0.2, 0.2 * 1.6, 0.7],\r\n      }.$extend(pu));\r\n      this.itemDrawer.render(ou);\r\n      this.enemyDrawer.render({\r\n        diffuseColor: [1.0, 1.0, 1.0, 1.0],\r\n      }.$extend(ou));\r\n      this.spriteDrawer.render(ou);\r\n      this.playerDrawer.render(ou);\r\n      this.ppCopy.render(this.framebufferZanzo1.texture, null, true);\r\n      this.bulletDrawer.render(ou);\r\n\r\n      if (this.zoomStrength > 0 && this.zoomAlpha > 0) {\r\n        this.framebufferZoom.bind();\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        this.ppZoom.render(this.framebufferMain.texture, {\r\n          center: this.ppZoom.viewCoordToShaderCoord(this.zoomCenterX, this.zoomCenterY),\r\n          strength: this.zoomStrength,\r\n        });\r\n      }\r\n\r\n      phigl.Framebuffer.unbind(gl);\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      this.ppCopy.render(this.framebufferMain.texture, {\r\n        alpha: 1.0 - this.zoomAlpha,\r\n      });\r\n      if (this.zoomStrength > 0 && this.zoomAlpha > 0) {\r\n        this.ppCopy.render(this.framebufferZoom.texture, {\r\n          alpha: this.zoomAlpha,\r\n        }, true);\r\n      }\r\n\r\n      gl.flush();\r\n\r\n      canvas.context.drawImage(image, 0, 0, cw, ch, -this.width * this.originX, -this.height * this.originY, this.width, this.height);\r\n\r\n      var temp = this.framebufferZanzo1;\r\n      this.framebufferZanzo1 = this.framebufferZanzo2;\r\n      this.framebufferZanzo2 = temp;\r\n    },\r\n\r\n    startZoom: function(x, y) {\r\n      this.zoomCenterX = x;\r\n      this.zoomCenterY = y;\r\n      this.tweener.clear()\r\n        .set({\r\n          zoomStrength: 0,\r\n          zoomAlpha: 1.0,\r\n        })\r\n        .to({\r\n          zoomStrength: 10,\r\n          zoomAlpha: 0,\r\n        }, 666, \"easeOutQuad\");\r\n    },\r\n\r\n    _static: {\r\n      // quality: 0.5,\r\n      quality: 1.0,\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.GlowEffect\", {\r\n\r\n    gl: null,\r\n    current: null,\r\n    before: null,\r\n    drawer: null,\r\n\r\n    width: 0,\r\n    height: 0,\r\n\r\n    init: function(gl, w, h) {\r\n      this.gl = gl;\r\n      \r\n      var sw = Math.pow(2, ~~Math.log2(w) + 1);\r\n      var sh = Math.pow(2, ~~Math.log2(h) + 1);\r\n\r\n      this.current = phigl.Framebuffer(gl, sw, sh);\r\n      this.before = phigl.Framebuffer(gl, sw, sh);\r\n\r\n      this.drawer = phigl.Drawable(gl)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"effect_blur\"))\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeData([\r\n          //\r\n          -1, +1, 0, h / sh,\r\n          //\r\n          +1, +1, w / sw, h / sh,\r\n          //\r\n          -1, -1, 0, 0,\r\n          // \r\n          +1, -1, w / sw, 0,\r\n        ])\r\n        .setUniforms(\"texture\", \"canvasSize\");\r\n\r\n      this.copyDrawer = phigl.Drawable(gl)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"effect_copy\"))\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeData([\r\n          //\r\n          -1, +1, 0, h / sh,\r\n          //\r\n          +1, +1, w / sw, h / sh,\r\n          //\r\n          -1, -1, 0, 0,\r\n          // \r\n          +1, -1, w / sw, 0,\r\n        ])\r\n        .setUniforms(\"texture\", \"alpha\");\r\n\r\n      this.width = w;\r\n      this.height = h;\r\n    },\r\n\r\n    bindCurrent: function() {\r\n      this.current.bind();\r\n    },\r\n\r\n    renderCurrent: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n\r\n      this.drawer.uniforms.texture.setValue(0).setTexture(this.current.texture);\r\n      this.drawer.uniforms.canvasSize.value = [this.current.width, this.current.height];\r\n      this.drawer.draw();\r\n\r\n      return this;\r\n    },\r\n\r\n    renderBefore: function() {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      this.copyDrawer.uniforms.texture.setValue(0).setTexture(this.before.texture);\r\n      this.copyDrawer.uniforms.alpha.value = 0.99;\r\n      this.copyDrawer.draw();\r\n\r\n      return this;\r\n    },\r\n\r\n    switchFramebuffer: function() {\r\n      var temp = this.current;\r\n      this.current = this.before;\r\n      this.before = temp;\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  \r\n  phina.define(\"glb.Laser\", {\r\n    superClass: \"glb.Shot\",\r\n    \r\n    player: null,\r\n    iScaleX: 1,\r\n    iScaleY: 1,\r\n    fScaleX: 1,\r\n    fScaleY: 1,\r\n    \r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n    },\r\n\r\n    spawn: function(options) {\r\n      this.dx = options.dx;\r\n      this.dy = options.dy;\r\n      this.player = options.player;\r\n      \r\n      glb.Shot.prototype.spawn.call(this, options);\r\n\r\n      this.iScaleX = this.scaleX * 2;\r\n      this.iScaleY = this.scaleY * 2;\r\n      this.fScaleX = this.scaleX * 1;\r\n      this.fScaleY = this.scaleY * 1;\r\n\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      this.bx = this.x;\r\n      this.by = this.y;\r\n      this.x = this.player.x;\r\n      this.y += this.dy;\r\n      var t = Math.clamp(this.age / 4, 0.0, 1.0);\r\n      // this.scaleX = this.iScaleX + (this.fScaleX - this.iScaleX) * t;\r\n      this.scaleY = this.iScaleY + (this.fScaleY - this.iScaleY) * t;\r\n      glb.Sprite.prototype.update.call(this, app);\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Obj\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n\r\n    visible: false,\r\n    position: null,\r\n    quaternion: null,\r\n    scale: null,\r\n    matrix: null,\r\n    alpha: 1,\r\n\r\n    dirty: true,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n      this.index = id * instanceStride;\r\n\r\n      this.position = vec3.create();\r\n      this.quaternion = quat.create();\r\n      this.scale = vec3.create();\r\n      this.matrix = mat4.create();\r\n    },\r\n\r\n    spawn: function(options) {\r\n      options = {}.$extend({\r\n        visible: false,\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n        rotX: 0,\r\n        rotY: 0,\r\n        rotZ: 0,\r\n        scaleX: OBJ_SCALE,\r\n        scaleY: OBJ_SCALE,\r\n        scaleZ: OBJ_SCALE,\r\n        alpha: 1,\r\n      }, options);\r\n\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n      this.age = 0;\r\n\r\n      this.visible = options.visible;\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n      this.z = options.z;\r\n      this.scaleX = options.scaleX;\r\n      this.scaleY = options.scaleY;\r\n      this.scaleZ = options.scaleZ;\r\n      this.alpha = options.alpha;\r\n\r\n      quat.identity(this.quaternion);\r\n      quat.rotateZ(this.quaternion, this.quaternion, options.rotZ);\r\n      quat.rotateY(this.quaternion, this.quaternion, options.rotY);\r\n      quat.rotateX(this.quaternion, this.quaternion, options.rotX);\r\n\r\n      this.dirty = true;\r\n\r\n      instanceData[index + 0] = this.visible ? 1 : 0;\r\n\r\n      if (this.dirty) {\r\n        mat4.fromRotationTranslationScale(this.matrix, this.quaternion, this.position, this.scale);\r\n\r\n        instanceData[index + 1] = this.matrix[0];\r\n        instanceData[index + 2] = this.matrix[1];\r\n        instanceData[index + 3] = this.matrix[2];\r\n        instanceData[index + 4] = this.matrix[4];\r\n        instanceData[index + 5] = this.matrix[5];\r\n        instanceData[index + 6] = this.matrix[6];\r\n        instanceData[index + 7] = this.matrix[8];\r\n        instanceData[index + 8] = this.matrix[9];\r\n        instanceData[index + 9] = this.matrix[10];\r\n        instanceData[index + 10] = this.matrix[12];\r\n        instanceData[index + 11] = this.matrix[13];\r\n        instanceData[index + 12] = this.matrix[14];\r\n        instanceData[index + 13] = this.alpha;\r\n        this.dirty = false;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      instanceData[index + 0] = this.visible ? 1 : 0;\r\n\r\n      if (this.dirty) {\r\n        mat4.fromRotationTranslationScale(this.matrix, this.quaternion, this.position, this.scale);\r\n\r\n        instanceData[index + 1] = this.matrix[0];\r\n        instanceData[index + 2] = this.matrix[1];\r\n        instanceData[index + 3] = this.matrix[2];\r\n        instanceData[index + 4] = this.matrix[4];\r\n        instanceData[index + 5] = this.matrix[5];\r\n        instanceData[index + 6] = this.matrix[6];\r\n        instanceData[index + 7] = this.matrix[8];\r\n        instanceData[index + 8] = this.matrix[9];\r\n        instanceData[index + 9] = this.matrix[10];\r\n        instanceData[index + 10] = this.matrix[12];\r\n        instanceData[index + 11] = this.matrix[13];\r\n        instanceData[index + 12] = this.matrix[14];\r\n        instanceData[index + 13] = this.alpha;\r\n        this.dirty = false;\r\n      }\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.instanceData[this.index + 0] = 0;\r\n    },\r\n\r\n    rotateX: function(rad) {\r\n      quat.rotateX(this.quaternion, this.quaternion, rad);\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n    rotateY: function(rad) {\r\n      quat.rotateY(this.quaternion, this.quaternion, rad);\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n    rotateZ: function(rad) {\r\n      quat.rotateZ(this.quaternion, this.quaternion, rad);\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n\r\n    lookAt: function(target) {\r\n      var mp = this.position;\r\n      var tp = target.position;\r\n\r\n      quat.identity(this.quaternion);\r\n      this.rotateZ(Math.atan2(tp[1] - mp[1], tp[0] - mp[0]));\r\n\r\n      var from = vec3.sub(vec3.create(), [tp[0], tp[1], 0], [mp[0], mp[1], 0]);\r\n      var to = vec3.sub(vec3.create(), tp, mp);\r\n      var q = quat.rotationTo(quat.create(), vec3.normalize(from, from), vec3.normalize(to, to));\r\n      quat.mul(this.quaternion, this.quaternion, q);\r\n\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n\r\n    _accessor: {\r\n      x: {\r\n        get: function() {\r\n          return this.position[0];\r\n        },\r\n        set: function(v) {\r\n          this.position[0] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      y: {\r\n        get: function() {\r\n          return this.position[1];\r\n        },\r\n        set: function(v) {\r\n          this.position[1] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      z: {\r\n        get: function() {\r\n          return this.position[2];\r\n        },\r\n        set: function(v) {\r\n          this.position[2] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n\r\n      scaleX: {\r\n        get: function() {\r\n          return this.scale[0];\r\n        },\r\n        set: function(v) {\r\n          this.scale[0] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      scaleY: {\r\n        get: function() {\r\n          return this.scale[1];\r\n        },\r\n        set: function(v) {\r\n          this.scale[1] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n      scaleZ: {\r\n        get: function() {\r\n          return this.scale[2];\r\n        },\r\n        set: function(v) {\r\n          this.scale[2] = v;\r\n          this.dirty = true;\r\n        }\r\n      },\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.ObjAsset\", {\r\n    superClass: \"phina.asset.File\",\r\n    \r\n    init: function() {\r\n      this.superInit();\r\n    },\r\n    \r\n    getAttributeData: function(objectName, groupName) {\r\n      objectName = objectName || \"defaultObject\";\r\n      groupName = groupName || \"defaultGroup\";\r\n      \r\n      var obj = globj.ObjParser.parse(this.data)[objectName].groups[groupName];\r\n      obj = globj.ObjParser.trialgulate(obj);\r\n      return globj.AttributeBuilder.build(obj);\r\n    },\r\n\r\n    getAttributeDataEdges: function(objectName, groupName) {\r\n      objectName = objectName || \"defaultObject\";\r\n      groupName = groupName || \"defaultGroup\";\r\n\r\n      var obj = globj.ObjParser.parse(this.data)[objectName].groups[groupName];\r\n      obj = globj.ObjParser.edge(obj);\r\n      return globj.AttributeBuilder.buildEdges(obj);\r\n    },\r\n  });\r\n\r\n  phina.asset.AssetLoader.assetLoadFunctions[\"obj\"] = function(key, path) {\r\n    var shader = glb.ObjAsset();\r\n    return shader.load({\r\n      path: path,\r\n    });\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.ObjDrawer\", {\r\n\r\n    gl: null,\r\n\r\n    objTypes: null,\r\n\r\n    counts: null,\r\n    instanceData: null,\r\n    instanceVbo: null,\r\n    ibos: null,\r\n    vbos: null,\r\n    textures: null,\r\n    pools: null,\r\n\r\n    faceDrawer: null,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.gl = gl;\r\n\r\n      this.objTypes = [];\r\n\r\n      this.counts = {};\r\n      this.instanceData = {};\r\n      this.instanceVbo = {};\r\n      this.ibos = {};\r\n      this.vbos = {};\r\n      this.textures = {};\r\n      this.pools = {};\r\n\r\n      this.faceDrawer = phigl.InstancedDrawable(gl, ext)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"obj\"))\r\n        .setAttributes(\"position\", \"uv\", \"normal\")\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\",\r\n          \"instanceAlpha\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"lightDirection\",\r\n          \"diffuseColor\",\r\n          \"ambientColor\",\r\n          \"cameraPosition\",\r\n          \"texture\"\r\n        );\r\n\r\n      this.glowDrawer = phigl.InstancedDrawable(gl, ext)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"objGlow\"))\r\n        .setAttributes(\"position\", \"uv\", \"normal\")\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\",\r\n          \"instanceAlpha\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\"\r\n        );\r\n\r\n      this.lightDirection = vec3.set(vec3.create(), 1, -0.5, 0);\r\n      vec3.normalize(this.lightDirection, this.lightDirection);\r\n      // this.diffuseColor = [0.6, 0.6, 0.6, 1.0];\r\n      // this.ambientColor = [0.6, 0.6, 0.6, 1.0];\r\n\r\n      this.diffuseColor = [0.5, 0.5, 0.5, 1.0];\r\n      this.ambientColor = [0.5, 0.5, 0.5, 1.0];\r\n    },\r\n\r\n    addObjType: function(objType, objAssetName, count, className) {\r\n      className = className || \"glb.Obj\";\r\n\r\n      count = count || 1;\r\n      var self = this;\r\n      var instanceStride = this.faceDrawer.instanceStride / 4;\r\n\r\n      if (!this.objTypes.contains(objType)) {\r\n        this.counts[objType] = count;\r\n        var instanceData = this.instanceData[objType] = Array.range(count).map(function(i) {\r\n          return [\r\n            // visible\r\n            0,\r\n            // m0\r\n            1, 0, 0,\r\n            // m1\r\n            0, 1, 0,\r\n            // m2\r\n            0, 0, 1,\r\n            // m3\r\n            0, 0, 0,\r\n            // alpha\r\n            1,\r\n          ];\r\n        }).flatten();\r\n        this.instanceVbo[objType] = phigl.Vbo(this.gl, this.gl.DYNAMIC_DRAW).set(instanceData);\r\n        this.ibos[objType] = phina.asset.AssetManager.get(\"ibo\", objAssetName + \".obj\");\r\n        this.vbos[objType] = phina.asset.AssetManager.get(\"vbo\", objAssetName + \".obj\");\r\n        this.textures[objType] = phina.asset.AssetManager.get(\"texture\", objAssetName + \".png\");\r\n\r\n        var ObjClass = phina.using(className);\r\n        this.pools[objType] = Array.range(count).map(function(id) {\r\n          return ObjClass(id, instanceData, instanceStride)\r\n            .on(\"removed\", function() {\r\n              self.pools[objType].push(this);\r\n            });\r\n        });\r\n\r\n        this.objTypes.push(objType);\r\n      }\r\n    },\r\n\r\n    get: function(objType) {\r\n      return this.pools[objType].shift();\r\n    },\r\n\r\n    update: function(app) {\r\n    },\r\n\r\n    render: function(uniforms) {\r\n      var self = this;\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      this.faceDrawer.uniforms.lightDirection.value = this.lightDirection;\r\n      this.faceDrawer.uniforms.diffuseColor.value = this.diffuseColor;\r\n      this.faceDrawer.uniforms.ambientColor.value = this.ambientColor;\r\n\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.faceDrawer.uniforms[key]) this.faceDrawer.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n\r\n      this.objTypes.forEach(function(objType) {\r\n        var count = self.counts[objType];\r\n        var instanceData = self.instanceData[objType];\r\n        var instanceVbo = self.instanceVbo[objType];\r\n        var ibo = self.ibos[objType];\r\n        var vbo = self.vbos[objType];\r\n        var texture = self.textures[objType];\r\n\r\n        try {\r\n          instanceVbo.set(instanceData);\r\n          self.faceDrawer\r\n            .setIndexBuffer(ibo)\r\n            .setAttributeVbo(vbo)\r\n            .setInstanceAttributeVbo(instanceVbo);\r\n          self.faceDrawer.uniforms.texture.setValue(0).setTexture(texture);\r\n          self.faceDrawer.draw(count);\r\n        } catch (e) {\r\n          console.error(\"obj draw error\", objType, instanceData.length);\r\n          throw e;\r\n        }\r\n      });\r\n    },\r\n\r\n    renderGlow: function(uniforms) {\r\n      var self = this;\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.glowDrawer.uniforms[key]) this.glowDrawer.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n\r\n      this.objTypes.forEach(function(objType) {\r\n        var count = self.counts[objType];\r\n        var instanceData = self.instanceData[objType];\r\n        var instanceVbo = self.instanceVbo[objType];\r\n        var ibo = self.ibos[objType];\r\n        var vbo = self.vbos[objType];\r\n        var texture = self.textures[objType];\r\n\r\n        try {\r\n          instanceVbo.set(instanceData);\r\n          self.glowDrawer\r\n            .setIndexBuffer(ibo)\r\n            .setAttributeVbo(vbo)\r\n            .setInstanceAttributeVbo(instanceVbo);\r\n          self.glowDrawer.uniforms.texture.setValue(0).setTexture(texture);\r\n          self.glowDrawer.draw(count);\r\n        } catch (e) {\r\n          console.error(\"obj-glow draw error\", objType, instanceData.length);\r\n          throw e;\r\n        }\r\n      });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Player\", {\r\n    superClass: \"glb.Obj\",\r\n\r\n    hp: 10,\r\n    mutekiTime: 0,\r\n    controllable: false,\r\n    bits: null,\r\n    shift: -1,\r\n    roll: 0,\r\n\r\n    tweener2: null,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n\r\n      this.roll = 0;\r\n      this.bits = [];\r\n      this.tweener2 = phina.accessory.Tweener().attachTo(this);\r\n    },\r\n\r\n    spawn: function() {\r\n      glb.Obj.prototype.spawn.call(this, {\r\n        visible: false,\r\n        x: SCREEN_WIDTH * 0.5,\r\n        y: SCREEN_HEIGHT * 1.2,\r\n        rotZ: (-90).toRadian(),\r\n        scaleX: 20,\r\n        scaleY: 20,\r\n        scaleZ: 20,\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    launch: function() {\r\n      this.tweener\r\n        .clear()\r\n        .set({\r\n          x: SCREEN_WIDTH * 0.5,\r\n          y: SCREEN_HEIGHT * 1.2,\r\n          visible: true,\r\n          controllable: false,\r\n          roll: R180,\r\n        })\r\n        .to({\r\n          y: SCREEN_HEIGHT * 0.8,\r\n          roll: 0,\r\n        }, 1000, \"easeOutBack\")\r\n        .set({\r\n          controllable: true,\r\n          mutekiTime: 90,\r\n          shift: -1,\r\n        })\r\n        .call(function() {\r\n          this.flare(\"launched\");\r\n        }.bind(this))\r\n        .wait(3000);\r\n\r\n      this.tweener2\r\n        .clear()\r\n        .set({\r\n          scaleX: 20 * 5,\r\n          scaleY: 20 * 5,\r\n          scaleZ: 20 * 5,\r\n        })\r\n        .to({\r\n          scaleX: 20,\r\n          scaleY: 20,\r\n          scaleZ: 20,\r\n        }, 1000);\r\n    },\r\n\r\n    setBitJoin: function(bitJoin) {\r\n      this.bitJoin = bitJoin;\r\n      bitJoin\r\n        .spawn({\r\n          visible: true,\r\n          scaleX: 20,\r\n          scaleY: 20,\r\n          scaleZ: 20,\r\n          rotZ: (-90).toRadian(),\r\n        });\r\n    },\r\n\r\n    setBarrier: function(barrier) {\r\n      this.barrier = barrier;\r\n      barrier.spawn({\r\n        scaleX: 20,\r\n        scaleY: 20,\r\n        scaleZ: 20,\r\n        rotZ: (-90).toRadian(),\r\n      });\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      if (this.controllable) {\r\n        this.control(app);\r\n      }\r\n\r\n      if (this.shift < 0) {\r\n        this.shift = Math.min(this.shift + 0.1, 0);\r\n      }\r\n\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      quat.copy(this.quaternion, BASE_QUAT);\r\n      quat.rotateX(this.quaternion, this.quaternion, this.roll);\r\n\r\n      var v = this.shift;\r\n      for (var i = 0; i < 4; i++) {\r\n        var bit = this.bits[i];\r\n        var bd0 = BIT_DATA0[i];\r\n        var bd1 = BIT_DATA1[i];\r\n        var bd2 = BIT_DATA2[i];\r\n\r\n        if (v < 0) {\r\n          var x = bd0.x * (-v) + bd1.x * (1 + v);\r\n          var y = bd0.y * (-v) + bd1.y * (1 + v);\r\n          var d = bd0.d * (-v) + bd1.d * (1 + v);\r\n        } else {\r\n          var x = bd1.x * (1 - v) + bd2.x * v;\r\n          var y = bd1.y * (1 - v) + bd2.y * v;\r\n          var d = bd1.d * (1 - v) + bd2.d * v;\r\n        }\r\n\r\n        if (bit) {\r\n          bit.visible = this.controllable && this.shift < 1;\r\n          if (bit.visible) {\r\n            bit.x = this.x + x;\r\n            bit.y = this.y + y;\r\n            quat.setAxisAngle(bit.quaternion, [0, 0, 1], d);\r\n            bit.rotateX(this.age * (i < 2 ? 0.2 : -0.2));\r\n          }\r\n        }\r\n      }\r\n\r\n      var bitJoin = this.bitJoin;\r\n      bitJoin.visible = this.controllable && this.shift === 1;\r\n      if (bitJoin) {\r\n        bitJoin.x = this.x;\r\n        bitJoin.y = this.y + -50;\r\n        bitJoin.rotateX(0.2);\r\n      }\r\n\r\n      var barrier = this.barrier;\r\n      if (barrier) {\r\n        barrier.visible = this.muteki;\r\n        if (barrier.visible) {\r\n          barrier.x = this.x;\r\n          barrier.y = this.y;\r\n          barrier.rotateX(0.5);\r\n        }\r\n      }\r\n\r\n      instanceData[index + 0] = this.visible ? 1 : 0;\r\n\r\n      if (this.dirty) {\r\n        quat.mul(tempQuat, RX, this.quaternion);\r\n        mat4.fromRotationTranslationScale(this.matrix, tempQuat, this.position, this.scale);\r\n\r\n        instanceData[index + 1] = this.matrix[0];\r\n        instanceData[index + 2] = this.matrix[1];\r\n        instanceData[index + 3] = this.matrix[2];\r\n        instanceData[index + 4] = this.matrix[4];\r\n        instanceData[index + 5] = this.matrix[5];\r\n        instanceData[index + 6] = this.matrix[6];\r\n        instanceData[index + 7] = this.matrix[8];\r\n        instanceData[index + 8] = this.matrix[9];\r\n        instanceData[index + 9] = this.matrix[10];\r\n        instanceData[index + 10] = this.matrix[12];\r\n        instanceData[index + 11] = this.matrix[13];\r\n        instanceData[index + 12] = this.matrix[14];\r\n        instanceData[index + 13] = this.alpha;\r\n        this.dirty = false;\r\n      }\r\n\r\n      this.age += 1;\r\n      this.mutekiTime -= 1;\r\n    },\r\n\r\n    control: function(app) {\r\n      var frame = app.ticker.frame;\r\n      var kb = app.keyboard;\r\n      var gp = app.gamepadManager.get();\r\n      var dir = kb.getKeyDirection();\r\n\r\n      var gpdir = gp.getStickDirection();\r\n      if (gpdir.length() > 0.5) {\r\n        var x = 0;\r\n        var y = 0;\r\n        if (gpdir.x < -0.5) x = -1.0;\r\n        else if (0.5 < gpdir.x) x = 1.0;\r\n        if (gpdir.y < -0.5) y = -1.0;\r\n        else if (0.5 < gpdir.y) y = 1.0;\r\n        dir.add(phina.geom.Vector2(x, y).normalize());\r\n      }\r\n\r\n      dir.add(gp.getKeyDirection());\r\n\r\n      dir.normalize();\r\n\r\n      var speed = (kb.getKey(\"LASER\") || gp.getKey(\"LASER\")) ? 13 : 24;\r\n\r\n      this.x = Math.clamp(this.x + dir.x * speed, 10, SCREEN_WIDTH - 10);\r\n      this.y = Math.clamp(this.y + dir.y * speed, 10, SCREEN_HEIGHT - 10);\r\n\r\n      if (dir.x) {\r\n        this.roll = Math.clamp(this.roll - dir.x * 0.2, -R90, R90);\r\n      } else {\r\n        if (this.roll < -0.2) {\r\n          this.roll += 0.2;\r\n        } else if (0.2 < this.roll) {\r\n          this.roll -= 0.2;\r\n        } else {\r\n          this.roll = 0;\r\n        }\r\n      }\r\n\r\n      var pressShot = kb.getKey(\"SHOT\") || gp.getKey(\"SHOT\");\r\n      var pressLaser = kb.getKey(\"LASER\") || gp.getKey(\"LASER\");\r\n\r\n      if (this.shift >= 0) {\r\n        if (kb.getKey(\"LASER\") || gp.getKey(\"LASER\")) {\r\n          this.shift = Math.min(this.shift + 0.2, 1);\r\n        } else {\r\n          this.shift = Math.max(this.shift - 0.2, 0);\r\n        }\r\n      }\r\n\r\n      if (pressShot && (0 <= this.shift && this.shift < 1) && frame % 2 === 0) {\r\n        this.shot();\r\n      } else if (pressLaser && this.shift == 1) {\r\n        this.laser();\r\n      }\r\n    },\r\n\r\n    hitBullet: function(bullet) {\r\n      // TO25O\r\n    },\r\n\r\n    hitEnemy: function(enemy) {\r\n      // TODO\r\n    },\r\n\r\n    laser: function() {\r\n      var f = [6, 7, 8].pickup();\r\n      this.flare(\"fireLaser\", {\r\n        x: this.x,\r\n        y: this.y - 40,\r\n        rotation: Math.PI * -0.5,\r\n        scaleX: 15,\r\n        scaleY: Math.randfloat(1.8, 2.2),\r\n        frameX: f % 8,\r\n        frameY: ~~(f / 8),\r\n        alpha: 1.0,\r\n        dx: 0,\r\n        dy: -150,\r\n        player: this,\r\n      });\r\n    },\r\n\r\n    shot: function() {\r\n      for (var i = -2; i < 2; i++) {\r\n        this.flare(\"fireShot\", {\r\n          x: this.x + i * 20 + 10,\r\n          y: this.y - 20,\r\n          rotation: Math.PI * -0.5,\r\n          scaleX: 4,\r\n          scaleY: 4,\r\n          frameX: [1, 2, 3, 4].pickup(),\r\n          frameY: 1,\r\n          alpha: 1.0,\r\n          dx: 0,\r\n          dy: -90,\r\n        });\r\n      }\r\n\r\n      var v = this.shift;\r\n      if (v < 0) return;\r\n\r\n      for (var i = 0; i < 4; i++) {\r\n        var bd0 = BIT_DATA0[i];\r\n        var bd1 = BIT_DATA1[i];\r\n        var bd2 = BIT_DATA2[i];\r\n        if (v < 0) {\r\n          var x = bd0.x * (-v) + bd1.x * (1 + v);\r\n          var y = bd0.y * (-v) + bd1.y * (1 + v);\r\n          var d = bd0.d * (-v) + bd1.d * (1 + v);\r\n          var cw = bd0.cw * (-v) + bd1.cw * (1 + v);\r\n          var sw = bd0.sw * (-v) + bd1.sw * (1 + v);\r\n          var cr = bd0.cr * (-v) + bd1.cr * (1 + v);\r\n          var sr = bd0.sr * (-v) + bd1.sr * (1 + v);\r\n        } else {\r\n          var x = bd1.x * (1 - v) + bd2.x * v;\r\n          var y = bd1.y * (1 - v) + bd2.y * v;\r\n          var d = bd1.d * (1 - v) + bd2.d * v;\r\n          var cw = bd1.cw * (1 - v) + bd2.cw * v;\r\n          var sw = bd1.sw * (1 - v) + bd2.sw * v;\r\n          var cr = bd1.cr * (1 - v) + bd2.cr * v;\r\n          var sr = bd1.sr * (1 - v) + bd2.sr * v;\r\n        }\r\n        [-1, 1].forEach(function(j) {\r\n          this.flare(\"fireShot\", {\r\n            x: this.x + x + cw * 15 * j + cr * 30,\r\n            y: this.y + y + sw * 15 * j + sr * 30,\r\n            rotation: d,\r\n            scaleX: 4,\r\n            scaleY: 4,\r\n            frameX: [1, 2, 3, 4].pickup(),\r\n            frameY: 1,\r\n            alpha: 1.0,\r\n            dx: cr * 90,\r\n            dy: sr * 90,\r\n          });\r\n        }.bind(this));\r\n      }\r\n    },\r\n\r\n    _accessor: {\r\n      muteki: {\r\n        get: function() {\r\n          return !this.controllable || this.mutekiTime > 0;\r\n        },\r\n        set: function() {},\r\n      },\r\n    }\r\n\r\n  });\r\n\r\n  var BASE_QUAT = quat.rotateZ(quat.create(), quat.create(), (-90).toRadian());\r\n  var RX = quat.setAxisAngle(quat.create(), [1, 0, 0], (10).toRadian());\r\n  var tempQuat = quat.create();\r\n  var R360 = (360).toRadian();\r\n  var R180 = (180).toRadian();\r\n  var R90 = (90).toRadian();\r\n  var R45 = (45).toRadian();\r\n  var R22_5 = (22.5).toRadian();\r\n\r\n  var BIT_DATA0 = [{\r\n    x: 0,\r\n    y: 0,\r\n    d: (0 - 90).toRadian(),\r\n    sr: Math.sin((0 - 90).toRadian()),\r\n    cr: Math.cos((0 - 90).toRadian()),\r\n    sw: Math.sin((0).toRadian()),\r\n    cw: Math.cos((0).toRadian()),\r\n  }, {\r\n    x: 0,\r\n    y: 0,\r\n    d: (0 - 90).toRadian(),\r\n    sr: Math.sin((0 - 90).toRadian()),\r\n    cr: Math.cos((0 - 90).toRadian()),\r\n    sw: Math.sin((0).toRadian()),\r\n    cw: Math.cos((0).toRadian()),\r\n  }, {\r\n    x: 0,\r\n    y: 0,\r\n    d: (0 - 90).toRadian(),\r\n    sr: Math.sin((0 - 90).toRadian()),\r\n    cr: Math.cos((0 - 90).toRadian()),\r\n    sw: Math.sin((0).toRadian()),\r\n    cw: Math.cos((0).toRadian()),\r\n  }, {\r\n    x: 0,\r\n    y: 0,\r\n    d: (0 - 90).toRadian(),\r\n    sr: Math.sin((0 - 90).toRadian()),\r\n    cr: Math.cos((0 - 90).toRadian()),\r\n    sw: Math.sin((0).toRadian()),\r\n    cw: Math.cos((0).toRadian()),\r\n  }, ];\r\n\r\n  var BIT_DATA1 = [{\r\n    x: -120,\r\n    y: 35,\r\n    d: (-20 - 90).toRadian(),\r\n    sr: Math.sin((-20 - 90).toRadian()),\r\n    cr: Math.cos((-20 - 90).toRadian()),\r\n    sw: Math.sin((-20).toRadian()),\r\n    cw: Math.cos((-20).toRadian()),\r\n  }, {\r\n    x: -70,\r\n    y: 20,\r\n    d: (-10 - 90).toRadian(),\r\n    sr: Math.sin((-10 - 90).toRadian()),\r\n    cr: Math.cos((-10 - 90).toRadian()),\r\n    sw: Math.sin((-10).toRadian()),\r\n    cw: Math.cos((-10).toRadian()),\r\n  }, {\r\n    x: 70,\r\n    y: 20,\r\n    d: (10 - 90).toRadian(),\r\n    sr: Math.sin((10 - 90).toRadian()),\r\n    cr: Math.cos((10 - 90).toRadian()),\r\n    sw: Math.sin((10).toRadian()),\r\n    cw: Math.cos((10).toRadian()),\r\n  }, {\r\n    x: 120,\r\n    y: 35,\r\n    d: (20 - 90).toRadian(),\r\n    sr: Math.sin((20 - 90).toRadian()),\r\n    cr: Math.cos((20 - 90).toRadian()),\r\n    sw: Math.sin((20).toRadian()),\r\n    cw: Math.cos((20).toRadian()),\r\n  }, ];\r\n\r\n  var BIT_DATA2 = [{\r\n    x: 0,\r\n    y: -50,\r\n    d: (6 - 90).toRadian(),\r\n    sr: Math.sin((6 - 90).toRadian()),\r\n    cr: Math.cos((6 - 90).toRadian()),\r\n    sw: Math.sin((6).toRadian()),\r\n    cw: Math.cos((6).toRadian()),\r\n  }, {\r\n    x: 0,\r\n    y: -50,\r\n    d: (3 - 90).toRadian(),\r\n    sr: Math.sin((3 - 90).toRadian()),\r\n    cr: Math.cos((3 - 90).toRadian()),\r\n    sw: Math.sin((3).toRadian()),\r\n    cw: Math.cos((3).toRadian()),\r\n  }, {\r\n    x: 0,\r\n    y: -50,\r\n    d: (-3 - 90).toRadian(),\r\n    sr: Math.sin((-3 - 90).toRadian()),\r\n    cr: Math.cos((-3 - 90).toRadian()),\r\n    sw: Math.sin((-3).toRadian()),\r\n    cw: Math.cos((-3).toRadian()),\r\n  }, {\r\n    x: 0,\r\n    y: -50,\r\n    d: (-6 - 90).toRadian(),\r\n    sr: Math.sin((-6 - 90).toRadian()),\r\n    cr: Math.cos((-6 - 90).toRadian()),\r\n    sw: Math.sin((-6).toRadian()),\r\n    cw: Math.cos((-6).toRadian()),\r\n  }, ];\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Pool\", {\r\n\r\n    array: null,\r\n    dirty: null,\r\n    comparator: null,\r\n\r\n    init: function(array, comparator) {\r\n      this.array = array || [];\r\n      this.comparator = comparator || function(lhs, rhs) {\r\n        return lhs - rhs;\r\n      };\r\n      this.dirty = true;\r\n    },\r\n\r\n    add: function(obj) {\r\n      this.array.push(obj);\r\n      this.dirty = true;\r\n    },\r\n\r\n    get: function() {\r\n      if (this.dirty) {\r\n        this.array.sort(this.comparator);\r\n        this.dirty = false;\r\n      }\r\n      return this.array.shift();\r\n    },\r\n  });\r\n\r\n  Array.prototype.$method(\"toPool\", function(comparator) {\r\n    return glb.Pool(this, comparator);\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.PostProcessing\", {\r\n\r\n    gl: null,\r\n    drawer: null,\r\n\r\n    width: 0,\r\n    height: 0,\r\n    \r\n    init: function(gl, w, h, shaderName, uniforms) {\r\n      this.gl = gl;\r\n\r\n      var sw = Math.pow(2, ~~Math.log2(w) + 1);\r\n      var sh = Math.pow(2, ~~Math.log2(h) + 1);\r\n\r\n      this.drawer = phigl.Drawable(gl)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", shaderName))\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeData([\r\n          //\r\n          -1, +1, 0, h / sh,\r\n          //\r\n          +1, +1, w / sw, h / sh,\r\n          //\r\n          -1, -1, 0, 0,\r\n          // \r\n          +1, -1, w / sw, 0,\r\n        ])\r\n        .setUniforms([\"texture\", \"canvasSize\"].concat(uniforms));\r\n\r\n      this.width = w;\r\n      this.height = h;\r\n      this.sw = sw;\r\n      this.sh = sh;\r\n    },\r\n\r\n    render: function(texture, uniformValues, additiveBlending) {\r\n      var gl = this.gl;\r\n\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      \r\n      if (additiveBlending) {\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n      } else {\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      }\r\n\r\n      this.drawer.uniforms.texture.setValue(0).setTexture(texture);\r\n      this.drawer.uniforms.canvasSize.value = [this.sw, this.sh];\r\n      if (uniformValues) this.setUniforms(uniformValues);\r\n      this.drawer.draw();\r\n\r\n      return this;\r\n    },\r\n\r\n    setUniforms: function(uniformValues) {\r\n      var uniforms = this.drawer.uniforms;\r\n      uniformValues.forIn(function(k, v) {\r\n        uniforms[k].value = v;\r\n      });\r\n    },\r\n    \r\n    viewCoordToShaderCoord: function(x, y) {\r\n      var q = glb.GLLayer.quality;\r\n      return [x * q / this.sw, (SCREEN_HEIGHT - y) * q / this.sh];\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Shot\", {\r\n    superClass: \"glb.Sprite\",\r\n    \r\n    power: 0,\r\n    bx: 0,\r\n    by: 0,\r\n\r\n    _active: false,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n    },\r\n\r\n    spawn: function(options) {\r\n      this.dx = options.dx;\r\n      this.dy = options.dy;\r\n      glb.Sprite.prototype.spawn.call(this, options);\r\n      this.bx = this.x;\r\n      this.by = this.y;\r\n      return this;\r\n    },\r\n\r\n    activate: function() {\r\n      this._active = true;\r\n      this.flare(\"activated\");\r\n      return this;\r\n    },\r\n\r\n    inactivate: function() {\r\n      this._active = false;\r\n      this.flare(\"inactivated\");\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      this.bx = this.x;\r\n      this.by = this.y;\r\n      this.x += this.dx;\r\n      this.y += this.dy;\r\n      glb.Sprite.prototype.update.call(this, app);\r\n    },\r\n\r\n    hitEnemy: function(enemy) {\r\n      // TODO\r\n      this.flare(\"hitEnemy\", { enemy: enemy });\r\n      this.remove();\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Sprite\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n\r\n    x: 0,\r\n    y: 0,\r\n    rotation: 0,\r\n    scale: 0,\r\n\r\n    age: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(options) {\r\n      options.$safe({\r\n        x: 0,\r\n        y: 0,\r\n        rotation: 0,\r\n        scale: 1,\r\n        frameX: 0,\r\n        frameY: 0,\r\n        alpha: 1,\r\n      });\r\n\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n      this.rotation = options.rotation;\r\n      this.scaleX = options.scaleX;\r\n      this.scaleY = options.scaleY;\r\n      this.frameX = options.frameX;\r\n      this.frameY = options.frameY;\r\n      this.alpha = options.alpha;\r\n\r\n      instanceData[index + 0] = 1; // visible\r\n      instanceData[index + 1] = this.x; // position.x\r\n      instanceData[index + 2] = this.y; // position.y\r\n      instanceData[index + 3] = this.rotation; // rotation\r\n      instanceData[index + 4] = this.scaleX; // scale\r\n      instanceData[index + 5] = this.scaleY; // scale\r\n      instanceData[index + 6] = this.frameX; // frame.x\r\n      instanceData[index + 7] = this.frameY; // frame.y\r\n      instanceData[index + 8] = this.alpha; // alpha\r\n\r\n      this.age = 0;\r\n\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      if (this.x < -100 || 640 + 100 < this.x || this.y < -100 || 960 + 100 < this.y) {\r\n        this.remove();\r\n        return;\r\n      }\r\n\r\n      instanceData[index + 1] = this.x; // position.x\r\n      instanceData[index + 2] = this.y; // position.y\r\n      instanceData[index + 3] = this.rotation; // rotation\r\n      instanceData[index + 4] = this.scaleX; // scale\r\n      instanceData[index + 5] = this.scaleY; // scale\r\n      instanceData[index + 6] = this.frameX; // frame.x\r\n      instanceData[index + 7] = this.frameY; // frame.y\r\n      instanceData[index + 8] = this.alpha; // alpha\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.instanceData[this.index + 0] = 0;\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.SpritDrawer\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    objTypes: null,\r\n\r\n    counts: null,\r\n    instanceData: null,\r\n    textures: null,\r\n    pools: null,\r\n\r\n    additiveBlending: true,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.superInit(gl, ext);\r\n\r\n      this.objTypes = [];\r\n\r\n      this.counts = {};\r\n      this.instanceData = {};\r\n      this.instanceVbos = {};\r\n      this.textures = {};\r\n      this.pools = {};\r\n\r\n      this\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"sprites\"))\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -16, +16,\r\n            //\r\n            +16, +16,\r\n            //\r\n            -16, -16,\r\n            //\r\n            +16, -16,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 1 / 8,\r\n            //\r\n            1 / 8, 1 / 8,\r\n            //\r\n            0, 0,\r\n            //\r\n            1 / 8, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceAlpha\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\",\r\n          \"globalScale\"\r\n        );\r\n\r\n      var instanceStride = this.instanceStride / 4;\r\n\r\n      this.uniforms.globalScale.setValue(1.0);\r\n    },\r\n\r\n    addObjType: function(objName, textureName, count, className) {\r\n      className = className || \"glb.Sprite\";\r\n\r\n      count = count || 1;\r\n      var self = this;\r\n      var instanceStride = this.instanceStride / 4;\r\n\r\n      if (!this.objTypes.contains(objName)) {\r\n        this.counts[objName] = count;\r\n        var instanceData = this.instanceData[objName] = Array.range(count).map(function(i) {\r\n          return [\r\n            // visible\r\n            0,\r\n            // m0\r\n            1, 0, 0,\r\n            // m1\r\n            0, 1, 0,\r\n            // m2\r\n            0, 0, 1,\r\n            // m3\r\n            0, 0, 0,\r\n          ];\r\n        }).flatten();\r\n        this.instanceVbos[objName] = phigl.Vbo(this.gl, this.gl.DYNAMIC_DRAW);\r\n\r\n        this.textures[objName] = phina.asset.AssetManager.get(\"texture\", textureName + \".png\");\r\n\r\n        var ObjClass = phina.using(className);\r\n        this.pools[objName] = Array.range(count).map(function(id) {\r\n          return ObjClass(id, instanceData, instanceStride)\r\n            .on(\"removed\", function() {\r\n              self.pools[objName].push(this);\r\n            });\r\n        });\r\n\r\n        this.objTypes.push(objName);\r\n      }\r\n    },\r\n\r\n    _createTexture: function() {\r\n      var texture = phina.graphics.Canvas().setSize(512, 512);\r\n      var context = texture.context;\r\n      var g = context.createRadialGradient(32, 32, 0, 32, 32, 32);\r\n      g.addColorStop(0.0, \"rgba(255, 255, 255, 0.3)\");\r\n      g.addColorStop(0.6, \"rgba(255, 125,   0, 0.3)\");\r\n      g.addColorStop(1.0, \"rgba(255,   0,   0, 0.0)\");\r\n      context.fillStyle = g;\r\n      context.fillRect(0, 0, 64, 64);\r\n      return texture;\r\n    },\r\n\r\n    get: function(objName) {\r\n      return this.pools[objName].shift();\r\n    },\r\n\r\n    update: function() {},\r\n\r\n    render: function(uniforms) {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      if (this.additiveBlending) {\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n      } else {\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      }\r\n      gl.disable(gl.DEPTH_TEST);\r\n\r\n      this.uniforms.globalScale.value = 1.0;\r\n\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.uniforms[key]) this.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n      var self = this;\r\n      this.objTypes.forEach(function(objName) {\r\n        var count = self.counts[objName];\r\n        var instanceData = self.instanceData[objName];\r\n        var instanceVbo = self.instanceVbos[objName];\r\n        var texture = self.textures[objName];\r\n\r\n        instanceVbo.set(instanceData);\r\n\r\n        self.setInstanceAttributeVbo(instanceVbo);\r\n        self.uniforms.texture.setValue(0).setTexture(texture);\r\n        self.draw(count);\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.TerrainDrawer\", {\r\n\r\n    gl: null,\r\n    faceDrawer: null,\r\n    edgeDrawer: null,\r\n\r\n    instanceData: null,\r\n    pool: null,\r\n    count: 0,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.gl = gl;\r\n      this.count = (glb.TerrainDrawer.countX * 2) * (glb.TerrainDrawer.countZ * 2);\r\n      this.faceDrawer = phigl.InstancedDrawable(gl, ext);\r\n      this.edgeDrawer = phigl.InstancedDrawable(gl, ext);\r\n      var instanceData = this.instanceData = [];\r\n      for (var i = 0; i < this.count; i++) {\r\n        instanceData.push(\r\n          // visible\r\n          0,\r\n          // m0\r\n          1, 0, 0,\r\n          // m1\r\n          0, 1, 0,\r\n          // m2\r\n          0, 0, 1,\r\n          // m3\r\n          0, 0, 0,\r\n          // alpha\r\n          1\r\n        );\r\n      }\r\n\r\n      this.faceDrawer\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"terrain\"))\r\n        .setIndexBuffer(phina.asset.AssetManager.get(\"ibo\", \"hex.obj\"))\r\n        .setAttributes(\"position\", \"uv\", \"normal\")\r\n        .setAttributeVbo(phina.asset.AssetManager.get(\"vbo\", \"hex.obj\"))\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\",\r\n          \"instanceAlpha\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"lightDirection\",\r\n          \"diffuseColor\",\r\n          \"ambientColor\",\r\n          \"cameraPosition\"\r\n        );\r\n\r\n      this.edgeDrawer\r\n        .setDrawMode(gl.LINES)\r\n        .setProgram(phina.asset.AssetManager.get(\"shader\", \"terrainEdge\"))\r\n        .setIndexBuffer(phina.asset.AssetManager.get(\"edgesIbo\", \"hex.obj\"))\r\n        .setAttributes(\"position\")\r\n        .setAttributeVbo(phina.asset.AssetManager.get(\"edgesVbo\", \"hex.obj\"))\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instanceMatrix0\",\r\n          \"instanceMatrix1\",\r\n          \"instanceMatrix2\",\r\n          \"instanceMatrix3\",\r\n          \"instanceAlpha\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"cameraPosition\",\r\n          \"color\"\r\n        );\r\n\r\n      var instanceStride = this.edgeDrawer.instanceStride / 4;\r\n\r\n      this.lightDirection = vec3.set(vec3.create(), -1, -0.5, 0);\r\n      vec3.normalize(this.lightDirection, this.lightDirection);\r\n      // this.faceDrawer.uniforms.diffuseColor.value = [0.22, 0.22, 0.22 * 2.6, 0.75];\r\n\r\n      var self = this;\r\n      this.pool = Array.range(0, this.count).map(function(id) {\r\n        return glb.Obj(id, instanceData, instanceStride)\r\n          .on(\"enterframe\", function() {\r\n            // 地形の流れる方向\r\n            this.x += 6 * 0.01;\r\n            this.z += 20 * 0.01;\r\n\r\n            var countX = glb.TerrainDrawer.countX;\r\n            var countZ = glb.TerrainDrawer.countZ;\r\n            var unit = glb.TerrainDrawer.unit;\r\n            if (this.x < -countX * unit) this.x += countX * unit * 2;\r\n            else if (countX * unit < this.x) this.x -= countX * unit * 2;\r\n            if (this.z < -countZ * unit * 1 / Math.sqrt(3) * 1.5) this.z += countZ * unit * 1 / Math.sqrt(3) * 1.5 * 2;\r\n            else if (countZ * unit * 1 / Math.sqrt(3) * 1.5 < this.z) this.z -= countZ * unit * 1 / Math.sqrt(3) * 1.5 * 2;\r\n          })\r\n          .on(\"removed\", function() {\r\n            self.pool.push(this);\r\n          });\r\n      });\r\n\r\n      this.faceDrawer.setInstanceAttributeData(this.instanceData);\r\n      this.edgeDrawer.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    update: function(app) {\r\n      var f = app.ticker.frame * 0.003;\r\n    },\r\n\r\n    get: function() {\r\n      return this.pool.shift();\r\n    },\r\n\r\n    render: function(uniforms) {\r\n      var gl = this.gl;\r\n      gl.enable(gl.BLEND);\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      this.faceDrawer.setInstanceAttributeData(this.instanceData);\r\n      this.edgeDrawer.setInstanceAttributeData(this.instanceData);\r\n\r\n      this.faceDrawer.uniforms.lightDirection.value = this.lightDirection;\r\n      this.faceDrawer.uniforms.ambientColor.value = [0.05, 0.05, 0.05, 0.7];\r\n      this.edgeDrawer.uniforms.color.value = [1.0, 1.0, 1.0, 1.0];\r\n\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.edgeDrawer.uniforms[key]) this.edgeDrawer.uniforms[key].value = value;\r\n          if (this.faceDrawer.uniforms[key]) this.faceDrawer.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n\r\n      this.edgeDrawer.draw(this.count);\r\n      this.faceDrawer.draw(this.count);\r\n    },\r\n\r\n    _static: {\r\n      countX: 12,\r\n      countZ: 22,\r\n      unit: 2.05,\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.asset.AssetLoader.assetLoadFunctions[\"textureSource\"] = function(key, path) {\r\n    var texture = phina.asset.Texture();\r\n    var flow = texture.load(path);\r\n    return flow;\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Assets\", {\r\n    _static: {\r\n      get: function(options) {\r\n        switch (options.assetType) {\r\n          case \"common\":\r\n            return {\r\n              obj: {\r\n                \"fighter.obj\": \"./asset/obj/fighter.obj\",\r\n                \"bit.obj\": \"./asset/obj/bit.obj\",\r\n                \"bitJoin.obj\": \"./asset/obj/bitJoin.obj\",\r\n                \"hex.obj\": \"./asset/obj/hex.obj\",\r\n                \"barrier.obj\": \"./asset/obj/barrier.obj\",\r\n              },\r\n              textureSource: {\r\n                \"fighter.png\": \"./asset/image/fighter.png\",\r\n                \"bit.png\": \"./asset/image/bit.png\",\r\n                \"bitJoin.png\": \"./asset/image/bit.png\",\r\n                \"bullets.png\": \"./asset/image/bullets.png\",\r\n                \"effect.png\": \"./asset/image/effect.png\",\r\n                \"barrier.png\": \"./asset/image/barrier.png\",\r\n              },\r\n              vertexShader: {\r\n                \"bullets.vs\": \"./asset/shader/bullets.vs\",\r\n                \"sprites.vs\": \"./asset/shader/sprites.vs\",\r\n                \"terrain.vs\": \"./asset/shader/terrain.vs\",\r\n                \"terrainEdge.vs\": \"./asset/shader/terrainEdge.vs\",\r\n                \"obj.vs\": \"./asset/shader/obj.vs\",\r\n                \"objEdge.vs\": \"./asset/shader/objEdge.vs\",\r\n                \"objGlow.vs\": \"./asset/shader/objGlow.vs\",\r\n                \"postproccess_copy.vs\": \"./asset/shader/postproccess.vs\",\r\n                \"postproccess_blur.vs\": \"./asset/shader/postproccess.vs\",\r\n                \"postproccess_zoom.vs\": \"./asset/shader/postproccess.vs\",\r\n              },\r\n              fragmentShader: {\r\n                \"bullets.fs\": \"./asset/shader/bullets.fs\",\r\n                \"sprites.fs\": \"./asset/shader/sprites.fs\",\r\n                \"terrain.fs\": \"./asset/shader/terrain.fs\",\r\n                \"terrainEdge.fs\": \"./asset/shader/terrainEdge.fs\",\r\n                \"obj.fs\": \"./asset/shader/obj.fs\",\r\n                \"objEdge.fs\": \"./asset/shader/objEdge.fs\",\r\n                \"objGlow.fs\": \"./asset/shader/objGlow.fs\",\r\n                \"postproccess_copy.fs\": \"./asset/shader/postproccess_copy.fs\",\r\n                \"postproccess_blur.fs\": \"./asset/shader/postproccess_blur.fs\",\r\n                \"postproccess_zoom.fs\": \"./asset/shader/postproccess_zoom.fs\",\r\n              },\r\n            };\r\n          case \"stage1\":\r\n            return {\r\n              obj: {\r\n                \"enemyS1.obj\": \"./asset/obj/enemyS1.obj\",\r\n                \"enemyS2.obj\": \"./asset/obj/enemyS2.obj\",\r\n                \"enemyS3.obj\": \"./asset/obj/enemyS3.obj\",\r\n                \"enemyS4.obj\": \"./asset/obj/enemyS4.obj\",\r\n                \"enemyS5.obj\": \"./asset/obj/enemyS5.obj\",\r\n                \"enemyM1.obj\": \"./asset/obj/enemyM1.obj\",\r\n              },\r\n              textureSource: {\r\n                \"enemyS1.png\": \"./asset/image/enemyS1.png\",\r\n                \"enemyS2.png\": \"./asset/image/enemyS2.png\",\r\n                \"enemyS3.png\": \"./asset/image/enemyS3.png\",\r\n                \"enemyS4.png\": \"./asset/image/enemyS4.png\",\r\n                \"enemyS5.png\": \"./asset/image/enemyS5.png\",\r\n                \"enemyM1.png\": \"./asset/image/enemyM1.png\",\r\n              },\r\n            };\r\n          default:\r\n            throw \"invalid assetType: \" + options.assetType;\r\n        }\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Danmaku\", {\r\n    init: function() {},\r\n    _static: {\r\n      _initialized: false,\r\n      config: {},\r\n      intervalRate: 1.0,\r\n      speedRate: 15.0,\r\n\r\n      initialize: function() {\r\n        this._initialized = true;\r\n\r\n        var R = bullet({ type: 2 });\r\n        var B = bullet({ type: 10 });\r\n\r\n        // 自機狙い単発\r\n        this.basic0 = new bulletml.Root({\r\n          top: action([\r\n            repeat(Infinity, [\r\n              interval(30),\r\n              fire(speed(1), R),\r\n              interval(30),\r\n              fire(speed(1), B),\r\n            ]),\r\n          ]),\r\n        });\r\n\r\n        // 自機狙い５連発\r\n        this.basic1 = new bulletml.Root({\r\n          top: action([\r\n            repeat(Infinity, [\r\n              interval(30),\r\n              fire(speed(1), R),\r\n              repeat(4, [\r\n                interval(4),\r\n                fire(dseq(0), sseq(0), R),\r\n              ]),\r\n            ]),\r\n          ]),\r\n        });\r\n\r\n        // 自機狙い3way（広）\r\n        this.basic2 = new bulletml.Root({\r\n          top: action([\r\n            repeat(Infinity, [\r\n              interval(30),\r\n              fire(direction(-15), speed(1), R),\r\n              repeat(2, [\r\n                fire(dseq(15), speed(1), R),\r\n              ]),\r\n            ]),\r\n          ]),\r\n        });\r\n\r\n        // 自機狙い3way（狭）\r\n        this.basic3 = new bulletml.Root({\r\n          top: action([\r\n            repeat(Infinity, [\r\n              interval(30),\r\n              fire(direction(-8), speed(1), R),\r\n              repeat(2, [\r\n                fire(dseq(8), speed(1), R),\r\n              ]),\r\n            ]),\r\n          ]),\r\n        });\r\n\r\n        this.test = new bulletml.Root({\r\n          top: action([\r\n            repeat(Infinity, [\r\n              fire(dseq(1), speed(1), R),\r\n              repeat(90 - 1, [\r\n                fire(dseq(360 / 90), speed(1), R),\r\n              ]),\r\n              interval(5),\r\n            ]),\r\n          ]),\r\n        });\r\n      },\r\n\r\n      createRunner: function(name) {\r\n        if (!this._initialized) this.initialize();\r\n        return this[name].createRunner(this.config);\r\n      },\r\n    },\r\n  });\r\n\r\n  var action = bulletml.dsl.action;\r\n  var actionRef = bulletml.dsl.actionRef;\r\n  var bullet = bulletml.dsl.bullet;\r\n  var bulletRef = bulletml.dsl.bulletRef;\r\n  var fire = bulletml.dsl.fire;\r\n  var fireRef = bulletml.dsl.fireRef;\r\n  var changeDirection = bulletml.dsl.changeDirection;\r\n  var changeSpeed = bulletml.dsl.changeSpeed;\r\n  var accel = bulletml.dsl.accel;\r\n  var wait = bulletml.dsl.wait;\r\n  var vanish = bulletml.dsl.vanish;\r\n  var repeat = bulletml.dsl.repeat;\r\n  var bindVar = bulletml.dsl.bindVar;\r\n  var notify = bulletml.dsl.notify;\r\n  var direction = bulletml.dsl.direction;\r\n  var _speed = bulletml.dsl.speed;\r\n  var horizontal = bulletml.dsl.horizontal;\r\n  var vertical = bulletml.dsl.vertical;\r\n  var fireOption = bulletml.dsl.fireOption;\r\n  var offsetX = bulletml.dsl.offsetX;\r\n  var offsetY = bulletml.dsl.offsetY;\r\n  var autonomy = bulletml.dsl.autonomy;\r\n\r\n  var interval = function(v) {\r\n    return wait(Math.max(v * glb.Danmaku.intervalRate, 1));\r\n  };\r\n\r\n  var speed = function(v) {\r\n    return _speed(v * glb.Danmaku.speedRate);\r\n  };\r\n\r\n  var dseq = function(v) {\r\n    return direction(v, \"sequence\");\r\n  };\r\n  var sseq = function(v) {\r\n    return _speed(v, \"sequence\");\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Enemy\", {\r\n    superClass: \"glb.Obj\",\r\n\r\n    _static: {\r\n      data: {},\r\n    },\r\n\r\n    _active: false,\r\n\r\n    hp: 10,\r\n    mutekiTime: 0,\r\n    runner: null,\r\n    pattern: 0,\r\n\r\n    radius: 50,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"removed\", function() {\r\n        this.runner = null;\r\n      });\r\n    },\r\n\r\n    activate: function() {\r\n      this._active = true;\r\n      this.flare(\"activated\");\r\n      return this;\r\n    },\r\n\r\n    inactivate: function() {\r\n      this._active = false;\r\n      this.flare(\"inactivated\");\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      instanceData[index + 0] = this.visible ? 1 : 0;\r\n      if (this.dirty) {\r\n        quat.mul(tempQuat, RX, this.quaternion);\r\n        mat4.fromRotationTranslationScale(this.matrix, tempQuat, this.position, this.scale);\r\n\r\n        instanceData[index + 1] = this.matrix[0];\r\n        instanceData[index + 2] = this.matrix[1];\r\n        instanceData[index + 3] = this.matrix[2];\r\n        instanceData[index + 4] = this.matrix[4];\r\n        instanceData[index + 5] = this.matrix[5];\r\n        instanceData[index + 6] = this.matrix[6];\r\n        instanceData[index + 7] = this.matrix[8];\r\n        instanceData[index + 8] = this.matrix[9];\r\n        instanceData[index + 9] = this.matrix[10];\r\n        instanceData[index + 10] = this.matrix[12];\r\n        instanceData[index + 11] = this.matrix[13];\r\n        instanceData[index + 12] = this.matrix[14];\r\n        instanceData[index + 13] = this.alpha;\r\n        this.dirty = false;\r\n      }\r\n\r\n      if (this.runner) {\r\n        this.runner.x = this.x;\r\n        this.runner.y = this.y;\r\n        this.runner.update();\r\n      }\r\n\r\n      this.age += 1;\r\n      this.mutekiTime -= 1;\r\n    },\r\n\r\n    hitShot: function(shot) {\r\n      // TODO\r\n      if (this.mutekiTime > 0) {\r\n        this.hp -= shot.power;\r\n        this.mutekiTime = 1;\r\n        this.flare(\"damaged\");\r\n      }\r\n    },\r\n\r\n    hitPlayer: function(player) {\r\n      // TODO\r\n    },\r\n\r\n    setRunner: function(name) {\r\n      this.runner = glb.Danmaku.createRunner(name);\r\n      return this;\r\n    },\r\n\r\n    setPattern: function(id) {\r\n      this.pattern = id;\r\n      return this;\r\n    },\r\n\r\n  });\r\n\r\n  var RX = quat.setAxisAngle(quat.create(), [1, 0, 0], (45).toRadian());\r\n  var tempQuat = quat.create();\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.EnemyS1\", {\r\n    superClass: \"glb.Enemy\",\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n    },\r\n\r\n  });\r\n\r\n  glb.Enemy.data[\"enemyS1\"] = {\r\n    count: 100,\r\n    className: \"glb.EnemyS1\",\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.DownloadScene\", {\r\n    superClass: \"phina.game.LoadingScene\",\r\n\r\n    init: function(options) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n        assets: glb.Assets.get({ assetType: options.assetType }),\r\n      });\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          label: {\r\n            className: \"phina.display.Label\",\r\n            arguments: \"downloading\",\r\n            x: SCREEN_WIDTH / 2,\r\n            y: SCREEN_HEIGHT / 2,\r\n            fill: \"white\",\r\n            stroke: null,\r\n          },\r\n        }\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.ErrorScene\", {\r\n    superClass: \"phina.display.DisplayScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          label: {\r\n            className: \"phina.display.Label\",\r\n            arguments: \"error: \" + glb.ErrorScene.message,\r\n            x: SCREEN_WIDTH / 2,\r\n            y: SCREEN_HEIGHT / 2,\r\n            fill: \"white\",\r\n            stroke: null,\r\n          },\r\n        }\r\n      });\r\n    },\r\n\r\n    _static: {\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.LoadScene\", {\r\n    superClass: \"phina.display.DisplayScene\",\r\n\r\n    init: function(options) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n      this.gl = options.gl;\r\n      this.assetType = options.assetType;\r\n      this.totalCount = 0;\r\n      this.count = 0;\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          label: {\r\n            className: \"phina.display.Label\",\r\n            arguments: \"loading\",\r\n            x: SCREEN_WIDTH / 2,\r\n            y: SCREEN_HEIGHT / 2,\r\n            fill: \"white\",\r\n            stroke: null,\r\n          },\r\n        }\r\n      });\r\n\r\n      this.tweener.wait(66).call(function() {\r\n        this.load();\r\n      }.bind(this));\r\n    },\r\n\r\n    onprogress: function() {\r\n      this.count += 1;\r\n\r\n      // TODO\r\n      this.label.text = this.count + \"/\" + this.totalCount;\r\n    },\r\n\r\n    oncomplete: function() {\r\n      this.app.popScene();\r\n    },\r\n\r\n    load: function() {\r\n      var self = this;\r\n      var gl = this.gl;\r\n      var manager = phina.asset.AssetManager;\r\n\r\n      this.totalCount =\r\n        Object.keys(manager.assets[\"vertexShader\"]).length +\r\n        Object.keys(manager.assets[\"obj\"]).length +\r\n        Object.keys(manager.assets[\"textureSource\"]).length;\r\n\r\n      var flows = [];\r\n\r\n      manager.assets[\"vertexShader\"].forIn(function(key, obj) {\r\n        var flow = phina.util.Flow(function(resolve) {\r\n          var name = key.replace(\".vs\", \"\");\r\n          var shader = phigl.Program(gl)\r\n            .attach(name + \".vs\")\r\n            .attach(name + \".fs\")\r\n            .link();\r\n\r\n          manager.set(\"shader\", name, shader);\r\n\r\n          self.flare(\"progress\");\r\n          resolve();\r\n        });\r\n\r\n        flows.push(flow);\r\n      });\r\n\r\n      manager.assets[\"obj\"].forIn(function(key, obj) {\r\n        var flow = phina.util.Flow(function(resolve) {\r\n          var attrData = obj.getAttributeData();\r\n          var edgeData = obj.getAttributeDataEdges();\r\n\r\n          var vbo = phigl.Vbo(gl).set(attrData.attr);\r\n          var ibo = phigl.Ibo(gl).set(attrData.indices);\r\n          var edgesVbo = phigl.Vbo(gl).set(edgeData.attr);\r\n          var edgesIbo = phigl.Ibo(gl).set(edgeData.indices);\r\n\r\n          manager.set(\"vbo\", key, vbo);\r\n          manager.set(\"ibo\", key, ibo);\r\n          manager.set(\"edgesVbo\", key, edgesVbo);\r\n          manager.set(\"edgesIbo\", key, edgesIbo);\r\n\r\n          self.flare(\"progress\");\r\n\r\n          resolve();\r\n        });\r\n\r\n        flows.push(flow);\r\n      });\r\n\r\n      manager.assets[\"textureSource\"].forIn(function(key, image) {\r\n        var flow = phina.util.Flow(function(resolve) {\r\n          var texture = phigl.Texture(gl, image);\r\n\r\n          manager.set(\"texture\", key, texture);\r\n\r\n          self.flare(\"progress\");\r\n\r\n          resolve();\r\n        });\r\n\r\n        flows.push(flow);\r\n      });\r\n\r\n      phina.util.Flow.all(flows).then(function() {\r\n        self.flare(\"complete\");\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    _static: {\r\n      deleteAssets: function(assetType) {\r\n        var assets = glb.Assets.get(assetType);\r\n        var manager = phina.asset.AssetManager;\r\n\r\n        if (assets[\"obj\"]) {\r\n          assets[\"obj\"].forIn(function(key) {\r\n            if (manager.get(\"vbo\", key)) {\r\n              manager.get(\"vbo\", key).delete();\r\n              delete manager.assets[\"vbo\"][key];\r\n            }\r\n            if (manager.get(\"ibo\", key)) {\r\n              manager.get(\"ibo\", key).delete();\r\n              delete manager.assets[\"ibo\"][key];\r\n            }\r\n            if (manager.get(\"edgesVbo\", key)) {\r\n              manager.get(\"edgesVbo\", key).delete();\r\n              delete manager.assets[\"edgesVbo\"][key];\r\n            }\r\n            if (manager.get(\"edgesIbo\", key)) {\r\n              manager.get(\"edgesIbo\", key).delete();\r\n              delete manager.assets[\"edgesIbo\"][key];\r\n            }\r\n\r\n            if (manager.assets[\"obj\"]) {\r\n              delete manager.assets[\"obj\"][key];\r\n            }\r\n          });\r\n        }\r\n\r\n        if (assets[\"textureSource\"]) {\r\n          assets[\"textureSource\"].forIn(function(key, obj) {\r\n            if (manager.get(\"texture\", key)) {\r\n              manager.get(\"texture\", key).delete();\r\n              delete manager.assets[\"texture\"][key];\r\n            }\r\n\r\n            if (manager.assets[\"textureSource\"]) {\r\n              delete manager.assets[\"textureSource\"][key];\r\n            }\r\n          });\r\n        }\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.SceneFlow\", {\r\n    superClass: \"phina.game.ManagerScene\",\r\n\r\n    init: function(options) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        scenes: [\r\n\r\n          // {\r\n          //   label: \"logo\",\r\n          //   className: \"phina.game.SplashScene\",\r\n          //   arguments: {\r\n          //     width: SCREEN_WIDTH,\r\n          //     height: SCREEN_HEIGHT,\r\n          //   },\r\n          // },\r\n\r\n          {\r\n            label: \"download-common\",\r\n            className: \"glb.DownloadScene\",\r\n            arguments: {}.$extend(options, { assetType: \"common\" }),\r\n          },\r\n\r\n          {\r\n            label: \"arcade\",\r\n            className: \"glb.ArcadeMode\",\r\n            arguments: {}.$extend(options, {}),\r\n          },\r\n\r\n        ],\r\n      });\r\n    },\r\n  });\r\n\r\n  phina.define(\"glb.ArcadeMode\", {\r\n    superClass: \"phina.game.ManagerScene\",\r\n\r\n    init: function(options) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        scenes: [\r\n\r\n          {\r\n            label: \"download-stage1\",\r\n            className: \"glb.DownloadScene\",\r\n            arguments: {}.$extend(options, { assetType: \"stage1\" }),\r\n          },\r\n\r\n          {\r\n            label: \"load-stage1\",\r\n            className: \"glb.LoadScene\",\r\n            arguments: {}.$extend(options, { assetType: \"stage1\" }),\r\n          },\r\n\r\n          {\r\n            label: \"stage\",\r\n            className: \"glb.StageScene\",\r\n            arguments: {}.$extend(options, { assetType: \"stage1\" }),\r\n          },\r\n\r\n        ],\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.StageScene\", {\r\n    superClass: \"phina.display.DisplayScene\",\r\n\r\n    collisions: null,\r\n    explosion: null,\r\n    player: null,\r\n    stage: null,\r\n\r\n    init: function(options) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n      });\r\n      this.fromJSON({\r\n        children: {\r\n          glLayer: {\r\n            className: \"glb.GLLayer\",\r\n            arguments: { canvas: options.canvas, gl: options.gl },\r\n          },\r\n          uiLayer: {\r\n            className: \"glb.UILayer\",\r\n          },\r\n        },\r\n      });\r\n\r\n      var self = this;\r\n      var glLayer = this.glLayer;\r\n      var uiLayer = this.uiLayer;\r\n      var collisions = this.collisions = glb.Collisions();\r\n      var explosion = this.explosion = glb.Explosion(glLayer);\r\n      var player = this.player = glLayer.playerDrawer.get(\"fighter\");\r\n      var stage = this.stage = glb.Stage();\r\n\r\n      stage.on(\"enemyTask\", function(e) {\r\n        self.launchEnemy(e.name, e.pattern, e.runner, e.x, e.y);\r\n      });\r\n      stage.on(\"spawnerTask\", function(e) {\r\n        glb.Spawner(e)\r\n          .on(\"spawn\", function(e) {\r\n            self.launchEnemy(e.name, e.pattern, e.runner, e.x, e.y);\r\n          })\r\n          .addChildTo(self);\r\n      });\r\n\r\n      this.on(\"enterframe\", function(e) {\r\n        collisions.update(e.app);\r\n      });\r\n\r\n      glb.Danmaku.config.target = player;\r\n      glb.Danmaku.config.createNewBullet = function(runner, options) {\r\n        var bullet = glLayer.bulletDrawer.get();\r\n        if (bullet) {\r\n          bullet.spawn(runner, options).addChildTo(glLayer);\r\n          collisions.addBullet(bullet);\r\n        }\r\n      };\r\n\r\n      Object.keys(glb.Assets.get({ assetType: options.assetType }).obj)\r\n        .map(function(key) {\r\n          return key.replace(\".obj\", \"\");\r\n        })\r\n        .forEach(function(key) {\r\n          var d = glb.Enemy.data[key] || {};\r\n          glLayer.enemyDrawer.addObjType(key, key, d.count || 100, d.className || \"glb.Enemy\");\r\n        });\r\n\r\n      player\r\n        .spawn()\r\n        .addChildTo(glLayer)\r\n        .on(\"fireShot\", function(e) {\r\n          var shot = glLayer.spriteDrawer.get(\"shot\");\r\n          if (shot) {\r\n            shot.spawn(e).addChildTo(glLayer);\r\n            collisions.addShot(shot);\r\n            if (!shot.has(\"hitEnemy\")) {\r\n              shot\r\n                .on(\"hitEnemy\", function(e) {\r\n                  explosion.spark(e.enemy.x, e.enemy.y);\r\n                });\r\n            }\r\n          }\r\n        })\r\n        .on(\"fireLaser\", function(e) {\r\n          var laser = glLayer.spriteDrawer.get(\"laser\");\r\n          if (laser) {\r\n            laser.spawn(e).addChildTo(glLayer);\r\n            collisions.addShot(laser);\r\n            if (!laser.has(\"hitEnemy\")) {\r\n              laser\r\n                .on(\"hitEnemy\", function(e) {\r\n                  explosion.small(e.enemy.x, e.enemy.y);\r\n                });\r\n            }\r\n          }\r\n\r\n          var mf = glLayer.spriteDrawer.get(\"effect\");\r\n          if (mf) {\r\n            var s = Math.randfloat(6.0, 8.0);\r\n            mf.spawn({\r\n              x: e.x,\r\n              y: e.y - 20,\r\n              rotation: (-90).toRadian(),\r\n              scaleX: s,\r\n              scaleY: s,\r\n              frameX: 5,\r\n              frameY: 1,\r\n              alpha: 0.8,\r\n            }).addChildTo(glLayer);\r\n            mf.tweener.clear().wait(20).call(function() {\r\n              mf.remove();\r\n            });\r\n          }\r\n        })\r\n        .on(\"launched\", function() {\r\n          // TODO\r\n        });\r\n      collisions.setPlayer(player);\r\n\r\n      [-2, -1, 1, 2].forEach(function(i) {\r\n        var bit = glLayer.playerDrawer.get(\"bit\")\r\n          .spawn({\r\n            x: SCREEN_WIDTH / 2,\r\n            y: SCREEN_HEIGHT / 2,\r\n            scaleX: 20,\r\n            scaleY: 20,\r\n            scaleZ: 20,\r\n            rotZ: (-90 + i * 10).toRadian(),\r\n          })\r\n          .addChildTo(glLayer);\r\n        player.bits.push(bit);\r\n      });\r\n\r\n      var bitJoin = glLayer.playerDrawer.get(\"bitJoin\")\r\n        .addChildTo(glLayer);\r\n      player.setBitJoin(bitJoin);\r\n\r\n      var barrier = glLayer.playerDrawer.get(\"barrier\").addChildTo(glLayer);\r\n      player.setBarrier(barrier);\r\n\r\n      // TODO atdks\r\n      for (var i = 0; i < 5; i++) {\r\n        var e = this.launchEnemy(\"enemyS\" + Math.randint(1, 5), 0, \"basic0\", Math.randfloat(0.1, 0.9) * SCREEN_WIDTH, Math.randfloat(0.1, 0.5) * SCREEN_HEIGHT);\r\n        if (e) {\r\n          quat.setAxisAngle(e.quaternion, [0, 0, 1], (90).toRadian());\r\n          // e.dirty = true;\r\n          // e.on(\"enterframe\", function() {\r\n          //   this.y += 1;\r\n          // });\r\n        }\r\n      }\r\n\r\n      player.launch();\r\n    },\r\n\r\n    launchEnemy: function(name, patternId, runnerName, x, y) {\r\n      var glLayer = this.glLayer;\r\n      var enemy = glLayer.enemyDrawer.get(name);\r\n      if (enemy) {\r\n        enemy\r\n          .spawn({\r\n            visible: true,\r\n            x: x,\r\n            y: y,\r\n          })\r\n          .setRunner(runnerName)\r\n          .setPattern(patternId)\r\n          .addChildTo(glLayer);\r\n\r\n        this.collisions.addEnemy(enemy);\r\n        return enemy;\r\n      }\r\n    },\r\n\r\n    update: function(app) {\r\n      this.stage.update();\r\n\r\n      if (app.keyboard.getKeyDown(\"p\")) {\r\n        app.canvas.saveAsImage();\r\n      }\r\n\r\n      if (app.keyboard.getKeyDown(\"l\")) {\r\n\r\n        this.player.launch();\r\n      }\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Stage\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    seq: null,\r\n    waitTime: 0,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.seq = [];\r\n    },\r\n\r\n    update: function() {\r\n      this.waitTime -= 1;\r\n      if (this.waitTime > 0) return;\r\n\r\n      var task = this.seq.shift();\r\n      if (task) {\r\n        this.fire(task);\r\n      }\r\n    },\r\n    \r\n    addTask: function(task) {\r\n      this.seq.push(task);\r\n      return this;\r\n    },\r\n    \r\n    onwaitTask: function(e) {\r\n      this.waitTime = e.time;\r\n    },\r\n    \r\n    onstartBgmTask: function(e) {\r\n      phina.asset.SoundManager.playMusic(e.name, e.fadeTime, e.loop);\r\n    },\r\n    \r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"glb.Stage1\", {\r\n    superClass: \"glb.Stage\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n\r\n      this\r\n        .addTask({ type: \"waitTask\", time: 1000 })\r\n        .addTask({ type: \"enemyTask\", name: \"\", pattern: 0, runner: \"\", x: 0, y: 0 });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  /**\r\n   * @param {Function} [fn] return true if lhs and rhs are equivalence.\r\n   */\r\n  Array.prototype.$method(\"uniq\", function(fn) {\r\n    if (fn) {\r\n      return this.filter(function(me, index, self) {\r\n        return !self.slice(0, index).some(function(another) {\r\n          return fn(me, another);\r\n        });\r\n      });\r\n    } else {\r\n      return this.filter(function(value, index, self) {\r\n        return self.indexOf(value) === index;\r\n      });\r\n    }\r\n  });\r\n  \r\n  \r\n\r\n});\r\n"],"sourceRoot":"/source/"}